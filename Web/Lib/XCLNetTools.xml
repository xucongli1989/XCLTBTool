<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XCLNetTools</name>
    </assembly>
    <members>
        <member name="T:XCLNetTools.StringHander.Rmb">
            <summary> 
            Rmb 的摘要说明。 
            </summary> 
        </member>
        <member name="M:XCLNetTools.StringHander.Rmb.CmycurD(System.Decimal)">
            <summary> 
            转换人民币大小金额 
            </summary> 
            <param name="num">金额</param> 
            <returns>返回大写形式</returns> 
        </member>
        <member name="M:XCLNetTools.StringHander.Rmb.CmycurD(System.String)">
            <summary> 
            一个重载，将字符串先转换成数字在调用CmycurD(decimal num) 
            </summary> 
            <param name="numstr">用户输入的金额，字符串形式未转成decimal</param> 
            <returns></returns> 
        </member>
        <member name="T:XCLNetTools.PublicClass.FormQuery">
            <summary>
            表单查询类
            </summary>
        </member>
        <member name="P:XCLNetTools.PublicClass.FormQuery.Name">
            <summary>
            字段名
            </summary>
        </member>
        <member name="P:XCLNetTools.PublicClass.FormQuery.IsNumber">
            <summary>
            true:为数值型（即无需加引号）
            </summary>
        </member>
        <member name="P:XCLNetTools.PublicClass.FormQuery.Symbol">
            <summary>
            条件符号
            </summary>
        </member>
        <member name="P:XCLNetTools.PublicClass.FormQuery.Value">
            <summary>
            查询输入的值
            </summary>
        </member>
        <member name="T:XCLNetTools.FileHandler.Upload">
            <summary>
            文件上传类
            </summary>  
        </member>
        <member name="M:XCLNetTools.FileHandler.Upload.#ctor">
            <summary>
            初始文件上传类(默认)
            </summary>  
        </member>
        <member name="M:XCLNetTools.FileHandler.Upload.UploadFileGo(System.String,System.Web.UI.WebControls.FileUpload)">
            <summary>
            上传本地文件到服务器
            </summary>  
            <param name="strSaveDir">在服务器端保存的物理路径。</param>  
            <param name="FileUploadCtrlID">上传的文件对象，这里使用的是FileUpload控件，</param>  
            <param>第二个参数如果是HTMl Input(File)控件可改为：HtmlInputFile HtmCtrlObjUploadFile</param>  
            <returns></returns>  
        </member>
        <member name="M:XCLNetTools.FileHandler.Upload.GetRandomStr">
            <summary>
            返回GUID
            </summary>  
        </member>
        <member name="M:XCLNetTools.FileHandler.Upload.GetSaveDirectory(System.String)">
            <summary>
            获取上传文件存放目录
            </summary>  
            <param name="DirectoryPath">存放文件的物理路径。</param>  
            <returns>返回存放文件的目录。</returns>  
        </member>
        <member name="P:XCLNetTools.FileHandler.Upload.UploadInfo">
            <summary>
            文件上传的返回信息
            </summary>  
        </member>
        <member name="P:XCLNetTools.FileHandler.Upload.UploadState">
            <summary>
            文件上传的返回状态，成功true，失败false
            </summary>  
        </member>
        <member name="P:XCLNetTools.FileHandler.Upload.FileType">
            <summary>
            允许上传文件的类型,* 默认代表可任意类型,或自定义类型，如 "jpg|gif|bmp"
            </summary>  
        </member>
        <member name="P:XCLNetTools.FileHandler.Upload.FileSize">
            <summary>
            上传文件的大小，单位K
            </summary>  
        </member>
        <member name="P:XCLNetTools.FileHandler.Upload.MaxFileSize">
            <summary>
            上传文件大小的最大长度，单位K
            </summary>  
        </member>
        <member name="P:XCLNetTools.FileHandler.Upload.NewFileName">
            <summary>
            上传后的文件名
            </summary>  
        </member>
        <member name="T:XCLNetTools.DataHandler.OutPutParamClass">
            <summary>
            导出参数类
            </summary>
        </member>
        <member name="P:XCLNetTools.DataHandler.OutPutParamClass.tableName">
            <summary>
            表名（主要是便于在xml字段名list中找到该节点信息）,对应dataSet中的table
            </summary>
        </member>
        <member name="P:XCLNetTools.DataHandler.OutPutParamClass.outPutClass">
            <summary>
            导出类，包含新旧字段名（为null时，则保持ds中的相应的列名）
            </summary>
        </member>
        <member name="P:XCLNetTools.DataHandler.OutPutParamClass.ds">
            <summary>
            要导出的DataSet
            </summary>
        </member>
        <member name="P:XCLNetTools.DataHandler.OutPutParamClass.fileTitle">
            <summary>
            导出的EXCEL文件的名字
            </summary>
        </member>
        <member name="P:XCLNetTools.DataHandler.OutPutParamClass.conTitle">
            <summary>
            excel中第一行的标题
            </summary>
        </member>
        <member name="P:XCLNetTools.DataHandler.OutPutParamClass.AutoDownLoad">
            <summary>
            是否自动下载
            </summary>
        </member>
        <member name="P:XCLNetTools.DataHandler.OutPutParamClass.CustomFileName">
            <summary>
            自定义文件名（保存后的完整路径名）
            </summary>
        </member>
        <member name="P:XCLNetTools.DataHandler.OutPutParamClass.SaveFormat">
            <summary>
            自定义保存时，文件保存的格式
            </summary>
        </member>
        <member name="P:XCLNetTools.DataHandler.OutPutParamClass.FirstRowIndex">
            <summary>
            填充的数据起始行索引号（0为第一行）
            </summary>
        </member>
        <member name="P:XCLNetTools.DataHandler.OutPutParamClass.FirstColumnIndex">
            <summary>
            填充的数据起始列索引号（0为第一行）
            </summary>
        </member>
        <member name="P:XCLNetTools.DataHandler.OutPutParamClass.IsShowCustomLine">
            <summary>
            是否显示自定义文字行（就是第一行的导出信息）
            </summary>
        </member>
        <member name="P:XCLNetTools.DataHandler.OutPutParamClass.IsShowFieldLine">
            <summary>
            是否显示字段行
            </summary>
        </member>
        <member name="P:XCLNetTools.DataHandler.OutPutParamClass.WorkBookFilePath">
            <summary>
            指定被操作的工作薄文件
            （用于向已有文件中写入数据并导出的情况）
            </summary>
        </member>
        <member name="P:XCLNetTools.DataHandler.OutPutParamClass.GetWorkBook">
            <summary>
            获取当前正在操作的WorkBook
            </summary>
        </member>
        <member name="T:XCLNetTools.StringHander.StringUtil">
             <summary>
             字符串相关处理
            by:xucongli  @2012  
            http://blog.csdn.net/luoyeyu1989
             </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.StringUtil.NoHTML(System.String)">
            <summary>
            删除所有HTML标记
            </summary>
            <param name="Htmlstring"></param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.StringHander.StringUtil.ReplaceHTML(System.String)">
            <summary>
            替换HTML标签为html实体形式
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.StringUtil.LessString(System.String,System.Int32)">
            <summary>
            截取指定条度的字符串
            </summary>
            <param name="str">需要被截选的字符串</param>
            <param name="length">截选长度</param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.StringHander.StringUtil.LessString(System.String,System.Int32,System.Char)">
            <summary>
            按指定字符截断并返回指定长度的字符
            </summary>
            <param name="str">源字符</param>
            <param name="length">返回长度</param>
            <param name="c">截断字符</param>
            <returns></returns>
        </member>
        <!-- 对于成员“M:XCLNetTools.StringHander.StringUtil.GetSubString(System.String,System.Int32)”忽略有格式错误的 XML 注释 -->
        <member name="M:XCLNetTools.StringHander.StringUtil.GetStringLength(System.String)">
            <summary>
            计算字符串的长度(一个双字节字符长度计2)
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.StringHander.StringUtil.GetSubString(System.String,System.Int32,System.String)">
            <summary>
            截取指定长度的字符串，一个汉字算两个字符
            </summary>
            <param name="str">源字符串</param>
            <param name="length">长度</param>
            <param name="s">需要替代的字符串</param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.StringHander.StringUtil.GenerateRandom(System.Int32)">
            <summary>
            随机器生成数字和字母组合,区分大小写
            </summary>
            <param name="Length"></param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.StringHander.StringUtil.GenerateRandomToChars(System.Int32)">
            <summary>
            随机生成只有字符的组合，区分大小写
            </summary>
            <param name="Length"></param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.StringHander.StringUtil.getRand(System.Int32)">
            <summary>
            随机生成只有字符的组合，不区分大小写
            </summary>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.StringHander.StringUtil.getRndString(System.Int32)">
            <summary>
            根据GUID生成唯一字符标示
            </summary>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.StringHander.StringUtil.unescape(System.String)">
            <summary>
            对js的escape进行解码（2013-11-15改为直接return Microsoft.JScript）
            解码 说明：本方法保证不论参数s是否经过escape()编码，均能得到正确的“解码”结果
            注意：待修改完善，当传入的字符串中有%时，会报错，数组超出索引
            </summary>
            <param name="s">解码字符串</param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.StringHander.StringUtil.Base64Code(System.String)">
            <summary>
            Base64加密
            </summary>
            <param name="Message"></param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.StringHander.StringUtil.Base64Decode(System.String)">
            <summary>
            Base64解密
            </summary>
            <param name="Message"></param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.StringHander.StringUtil.UnicodeDecode(System.String)">
            <summary>
            Unicode解码
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.StringUtil.UnicodeEncode(System.String)">
            <summary>
            Unicode编码
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.StringUtil.GetWeek(System.DateTime)">
            <summary>
            返回星期几，如："星期一"
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.StringHander.StringUtil.GetDateSpan(System.DateTime)">
            <summary>
            获取日期区间
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.StringHander.StringUtil.GetTimeSpan(System.DateTime,System.DateTime)">
            <summary> 
            时间差 
            </summary> 
            <param name="starttime">开始时间</param> 
            <param name="endtime">结束时间</param> 
            <returns>0}时{1}分{2}秒{3}毫秒</returns> 
        </member>
        <member name="M:XCLNetTools.StringHander.StringUtil.GetWeekOfYear(System.DateTime)">
            <summary>
            获取某一日期是该年中的第几周
            </summary>
            <param name="dt">日期</param>
            <returns> 该日期在该年中的周数 </returns>
        </member>
        <member name="M:XCLNetTools.StringHander.StringUtil.GetWeekAmount(System.Int32)">
            <summary>
            获取某一年有多少周
            </summary>
            <param name="year">年份 </param>
            <returns>该年周数</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.StringUtil.GetMonthLst">
            <summary>
            返回月份list(1到12)
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.StringHander.StringUtil.GetYear(System.DateTime,System.Int32)">
            <summary>
            返回指定年份的前count年的LIST
            </summary>
            <param name="count">前几年</param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.StringHander.StringUtil.In(System.Int32,System.Int32,System.Int32)">
            <summary>
            比较
            </summary>
            <param name="Lp"></param>
            <param name="Hp"></param>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.StringHander.StringUtil.CheckNullToEmpty(System.Object)">
            <summary>
            字符串空转换
            </summary>
            <param name="inputString"></param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.StringHander.StringUtil.Encrypt(System.String,System.String)">
            <summary>
            加密方法 
            </summary>
            <param name="pToEncrypt"></param>
            <param name="sKey">sKey输入密码的时候，必须使用英文字符，区分大小写，且字符数量是8个，不能多也不能少，否则出错</param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.StringHander.StringUtil.Decrypt(System.String,System.String)">
            <summary>
            解密方法 
            </summary>
            <param name="pToDecrypt"></param>
            <param name="sKey">sKey输入密码的时候，必须使用英文字符，区分大小写，且字符数量是8个，不能多也不能少，否则出错</param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.StringHander.StringUtil.str_md5(System.String)">
            <summary>
            给字符串进行MD5加密
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.StringHander.StringUtil.C1Round(System.Double,System.Int32)">
            <summary>
            四舍五入
            </summary>
            <param name="value">源数值</param>
            <param name="digit">保留小数点位数</param>
            <returns>double</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.StringUtil.GetTagID(System.String)">
            <summary>
            返回字符串数组
            </summary>
            <param name="stemp"></param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.StringHander.StringUtil.VldInt(System.String)">
            <summary>
            判断输入是否数字
            </summary>
            <param name="num">要判断的字符串</param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.StringHander.StringUtil.GetHtmlEditReplace(System.String)">
            <summary>
            返回文本编辑器替换后的字符串
            </summary>
            <param name="str">要替换的字符串</param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.StringHander.StringUtil.getSpells(System.String)">
            <summary>
            获取汉字第一个拼音
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.StringHander.StringUtil.GetQuanJiao(System.String)">
            <summary>
            半角转全角
            </summary>
            <param name="BJstr"></param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.StringHander.StringUtil.GetBanJiao(System.String)">
            <summary>
            全角转半角
            </summary>
            <param name="QJstr"></param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.StringHander.StringUtil.ToHexString(System.String)">
            <summary>
            为字符串中的非英文字符编码
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.StringHander.StringUtil.NeedToEncode(System.Char)">
             <summary>
            指定 一个字符是否应该被编码
             </summary>
             <param name="chr"></param>
             <returns></returns>
        </member>
        <member name="M:XCLNetTools.StringHander.StringUtil.ToHexString(System.Char)">
            <summary>
            为非英文字符串编码
            </summary>
            <param name="chr"></param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.StringHander.StringUtil.ReplaceQuoteENToCN(System.String)">
            <summary>
            将指定字符串中的英文引号替换为中文引号（中文引号没有考虑正反）
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.StringUtil.ReplaceQuoteToHTML(System.String)">
            <summary>
            将指定字符串中的英文引号替换为html引号实体
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.StringUtil.RemoveQuote(System.String)">
            <summary>
            移除指定字符串中的英文引号
            </summary>
        </member>
        <member name="T:XCLNetTools.Message.Log">
            <summary>
            消息日志
            </summary>
        </member>
        <member name="F:XCLNetTools.Message.Log.LogType">
            <summary>
            消息记录类型
            </summary>
        </member>
        <member name="F:XCLNetTools.Message.Log.IsSimple">
            <summary>
            是否为简易版消息
            在异常处理消息提示中，若为true，则不显示堆栈异常详情
            </summary>
        </member>
        <member name="M:XCLNetTools.Message.Log.WriteMessage(System.Object)">
            <summary>
            直接输出obj的json形式（输出的json已由unicode编码过了）
            </summary>
        </member>
        <member name="M:XCLNetTools.Message.Log.WriteMessage(XCLNetTools.Message.MessageModel)">
            <summary>
            直接输出MessageModel的JSON形式（此JSON作为Log.JsonMessageName的一个属性）
            </summary>
        </member>
        <member name="M:XCLNetTools.Message.Log.WriteMessage(System.String)">
            <summary>
            输出消息（json）
            MessageModel
            </summary>
        </member>
        <member name="P:XCLNetTools.Message.Log.JsonMessageName">
            <summary>
            以json方式提示的属性名,它的下面有多个成员
            <remarks>
            如：data.XCLXXXXX.Message
            </remarks>
            </summary>
        </member>
        <member name="P:XCLNetTools.Message.Log.LogInfo">
            <summary>
            log4net实例，需要初始化其配置信息
            </summary>
        </member>
        <member name="T:XCLNetTools.Message.Log.LogTypeEnum">
            <summary>
            信息输出处理类型枚举
            </summary>
        </member>
        <member name="F:XCLNetTools.Message.Log.LogTypeEnum.Log4Net">
            <summary>
            需要log4Net来记录错误信息
            </summary>
        </member>
        <member name="F:XCLNetTools.Message.Log.LogTypeEnum.Json">
            <summary>
            输出为json形式的信息(用于ajax请求)
            </summary>
        </member>
        <member name="T:XCLNetTools.StringHander.UrlOper">
            <summary>
            URL的操作类
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.UrlOper.IsBase64(System.String)">
            <summary>
            是否是Base64字符串
            </summary>
            <param name="eStr"></param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.StringHander.UrlOper.AddParam(System.String,System.String,System.String)">
            <summary>
            添加URL参数
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.UrlOper.UpdateParam(System.String,System.String,System.String)">
            <summary>
            更新URL参数
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.UrlOper.RemoveParam(System.String,System.String)">
            <summary>
            删除url参数
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.UrlOper.ParseUrl(System.String,System.String@,System.Collections.Specialized.NameValueCollection@)">
            <summary>
            分析 url 字符串中的参数信息
            </summary>
            <param name="url">输入的 URL</param>
            <param name="baseUrl">输出 URL 的基础部分</param>
            <param name="nvc">输出分析后得到的 (参数名,参数值) 的集合</param>
        </member>
        <member name="M:XCLNetTools.StringHander.UrlOper.GetUrlError(System.String)">
             <summary>
             获取指定URL的请求状态：
            200 - 确定。客户端请求已成功。 
            201 - 已创建。 
            202 - 已接受。
            400 - 错误的请求
            401 - 访问被拒绝
            403 - 禁止访问
            404 - 未找到
            405 - 用来访问本页面的 HTTP 谓词不被允许（方法不被允许） 
            406 - 客户端浏览器不接受所请求页面的 MIME 类型。 
            407 - 要求进行代理身份验证。 
            412 - 前提条件失败。 
            413 – 请求实体太大。 
            414 - 请求 URI 太长。 
            415 – 不支持的媒体类型。 
            416 – 所请求的范围无法满足。 
            417 – 执行失败。 
            423 – 锁定的错误
            500 - 内部服务器错误。 
            501 - 页眉值指定了未实现的配置。 
            502 - Web 服务器用作网关或代理服务器时收到了无效响应。 
            503 - 服务不可用。这个错误代码为 IIS 6.0 所专用。 
            504 - 网关超时。 
            505 - HTTP 版本不受支持。
            </summary>
            <param name="curl">要请求的URL</param>
        </member>
        <member name="T:XCLNetTools.StringHander.RSACryption">
            <summary> 
            RSA加密解密及RSA签名和验证
            </summary> 
        </member>
        <member name="M:XCLNetTools.StringHander.RSACryption.RSAKey(System.String@,System.String@)">
            <summary>
            RSA 的密钥产生 产生私钥 和公钥 
            </summary>
            <param name="xmlKeys"></param>
            <param name="xmlPublicKey"></param>
        </member>
        <member name="T:XCLNetTools.FileHandler.ComFile">
             <summary>
            文件操作公共类
             </summary>
        </member>
        <member name="M:XCLNetTools.FileHandler.ComFile.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:XCLNetTools.FileHandler.ComFile.Crop(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            指定坐标和宽高裁剪图片
            </summary>
            <param name="img">原图路径</param>
            <param name="width">指定的宽度</param>
            <param name="height">指定的高度</param>
            <param name="x">X坐标</param>
            <param name="y">Y坐标</param>
            <returns>System.Drawing.Image,再调用save就行了,注意：调用完后需要Dispose</returns>
        </member>
        <member name="M:XCLNetTools.FileHandler.ComFile.MakeThumbnail(System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            生成缩略图
            </summary>
            <param name="originalImagePath">源图路径（物理路径）</param>
            <param name="thumbnailPath">缩略图路径（物理路径）</param>
            <param name="width">缩略图宽度</param>
            <param name="height">缩略图高度</param>
            <param name="mode">生成缩略图的方式</param>    
        </member>
        <member name="M:XCLNetTools.FileHandler.ComFile.GenerateCheckCode">
            <summary>
            生成验证码的随机数
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.FileHandler.ComFile.CreateCheckCodeImage">
            <summary>
            生成验证码图片
            </summary>
        </member>
        <member name="M:XCLNetTools.FileHandler.ComFile.MapPath(System.String)">
            <summary>
            取得文件物理路径
            </summary>
            <param name="path">文件虚拟路径</param>
            <returns>文件物理路径</returns>
        </member>
        <member name="M:XCLNetTools.FileHandler.ComFile.DeleteFile(System.String)">
            <summary>
            删除文件(删除成功返回TRUE,删除失败返回FALSE)
            </summary>
            <param name="FilePath">文件路径,包括文件名(可用相对路径)</param>
            <returns>删除成功返回TRUE,删除失败返回FALSE</returns>
        </member>
        <member name="M:XCLNetTools.FileHandler.ComFile.GetExtName(System.String)">
            <summary>
            取得文件扩展名(不包含小圆点的)【小写】
            </summary>
            <param name="fileName">文件完整路径或文件名</param>
            <returns>文件扩展名(不包含小圆点的)或""</returns>
        </member>
        <member name="M:XCLNetTools.FileHandler.ComFile.CopyFile(System.String,System.String)">
            <summary>
            复制文件(若已存在目标文件则覆盖)，若目标目录不存在，则自动创建
            </summary>
            <param name="srcPath">源文件</param>
            <param name="dstPath">目标文件</param>
            <returns>复制成功返回TRUE,复制失败返回FALSE.</returns>
        </member>
        <member name="M:XCLNetTools.FileHandler.ComFile.CopyFile(System.String,System.String,System.Boolean)">
            <summary>
            复制文件，若目标目录不存在，则自动创建
            </summary>
            <param name="srcPath">源文件</param>
            <param name="dstPath">目标文件</param>
            <param name="overwrite">是否覆盖目标文件</param>
            <returns>复制成功返回TRUE,复制失败返回FALSE</returns>
        </member>
        <member name="M:XCLNetTools.FileHandler.ComFile.GetFolderFiles(System.String)">
            <summary>
            取得文件夹中的文件列表
            </summary>
            <param name="path">文件夹路径</param>
            <returns>字符串数组(存储了一个或多个文件名)</returns>
        </member>
        <member name="M:XCLNetTools.FileHandler.ComFile.GetFolderFilesByRecursion(System.String)">
            <summary>
            递归获取指定文件夹下的所有文件路径
            </summary>
            <param name="rootPath">起始文件夹路径</param>
        </member>
        <member name="M:XCLNetTools.FileHandler.ComFile.GetFolderFilesByRecursion(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            递归获取指定文件夹下的所有文件路径
            </summary>
            <param name="rootPath">起始文件夹路径</param>
            <param name="lst">文件路径存放的list</param>
        </member>
        <member name="M:XCLNetTools.FileHandler.ComFile.DownLoadFile(System.String,System.String,System.Boolean)">
            <summary>
            文件下载
            </summary>
            <param name="path">文件链接（物理路径）</param>
            <param name="realName">要显示下载时的文件名</param>
            <param name="isDel">true:输出后删除此文件</param>
        </member>
        <member name="M:XCLNetTools.FileHandler.ComFile.GetSaveDirectory(System.String)">
            <summary>
            返回目录路径，若该目录不存在，则创建该目录
            </summary>  
            <param name="DirectoryPath">存放文件的物理路径。</param>  
            <returns>返回存放文件的目录。</returns>  
        </member>
        <member name="M:XCLNetTools.FileHandler.ComFile.GetFileFolderPath(System.String)">
            <summary>
            获取文件所在的文件夹【不带'\'】
            </summary>
        </member>
        <member name="M:XCLNetTools.FileHandler.ComFile.GetFileSize(System.String)">
            <summary>
            返回文件大小
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.FileHandler.ComFile.IsBinaryFile(System.String)">
            <summary>
            判断文件是否是二进制文件
            </summary>
            <param name="filePath">文件路径</param>
            <returns>返回True为二进制文件，否则是文本文件</returns>
        </member>
        <member name="M:XCLNetTools.FileHandler.ComFile.IsTextFile(System.String)">
            <summary>
            判断文件是否是文本文件
            </summary>
            <param name="filePath">文件路径</param>
            <returns>返回True为文本文件，否则是二进制文件</returns>
        </member>
        <member name="M:XCLNetTools.FileHandler.ComFile.GetFileName(System.String)">
            <summary>
            获取文件名（包含扩展名）
            </summary>
        </member>
        <member name="M:XCLNetTools.FileHandler.ComFile.GetFileName(System.String,System.Boolean)">
            <summary>
            获取文件名
            </summary>
            <param name="isWithExt">是否包含扩展名</param>
        </member>
        <member name="T:XCLNetTools.StringHander.Common">
             <summary>
            公用类
             </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetClientIP">
            <summary>
            取得用户客户端IP(穿过代理服务器取远程用户真实IP地址)
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetIpByIP138">
            <summary>
            根据ip138网站反馈结果获取服务端外网ip地址
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.ExchangeNote(System.String)">
            <summary>
            防止HTML代碼注入
            </summary>
            <param name="NoteContent"></param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.No_SqlHack(System.String)">
            <summary>
            防止SQL注入
            </summary>
            <param name="inputStr">輸入的sql語句</param>
            <returns>過濾後的語句</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.NoSqlAndHtml(System.String)">
            <summary>
            过滤HTML 和SQL 
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.SetCookies(System.String,System.String,System.Int32)">
            <summary>
            设置cookies
            </summary>
            <param name="mainName">主键</param>
            <param name="mainValue">值</param>
            <param name="days">天数</param>
            <returns>是否设置成功</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetCookies(System.String)">
            <summary>
            获取cookies
            .net 和JavaScript url加密不一样，解密一样
            </summary>
            <param name="mainName">主键</param>
            <returns>value值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetCookies2(System.String)">
            <summary>
            
            </summary>
            <param name="mainName"></param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.DelCookies(System.String)">
            <summary>
            删除Cookies
            </summary>
            <param name="mainName"></param>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.CheckValidExt(System.String)">
            <summary>
             检测扩展名的有效性
             </summary>
             <param name="sExt">文件名扩展名</param>
             <returns>如果扩展名有效,返回true,否则返回false.</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.CheckValidExt(System.String,System.String)">
            <summary>
             检测扩展名的有效性
             </summary>
             <param name="sExt">文件名扩展名</param>
             <param name="ext">自定义扩展名如：jpe|jpeg|jpg|png</param>
             <returns>如果扩展名有效,返回true,否则返回false.</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.imgDel(System.String)">
            <summary>
            删除图片
            </summary>
            <param name="imagepath">图片路径</param>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetRandomFileName(System.String)">
             <summary>
            给上传的文件随机命名
             </summary>
             <param name="filename">文件名</param>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.MakeThumbnail(System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            生成缩略图
            </summary>
            <param name="originalImagePath">源图路径（物理路径）</param>
            <param name="thumbnailPath">缩略图路径（物理路径）</param>
            <param name="width">缩略图宽度</param>
            <param name="height">缩略图高度</param>
            <param name="mode">生成缩略图的方式</param>    
        </member>
        <member name="M:XCLNetTools.StringHander.Common.SetHtml(System.Text.StringBuilder,System.String)">
            <summary>
            生成HTML页面
            </summary>
            <param name="sHtml">Html文件内容</param>
            <param name="path">虚拟路径</param>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.SetHtmlByURL(System.String,System.String,System.String)">
            <summary>
            根据URL生成HTML页面
            </summary>
            <param name="url">URL地址</param>
            <param name="path">物理路径</param>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetString(System.String,System.String)">
            <summary>
            若字符串为null或Empty，则返回指定的defaultValue.
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetString(System.Object,System.String)">
            <summary>
            若object为null或Empty，则返回指定的defaultValue.
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetStringArrayByIntArray(System.Int32[])">
            <summary>
            将int数组转为string数组
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetInt(System.String,System.Int32)">
            <summary>
            将字符串转化为整数若值不是数字返回defaultValue
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetInt(System.Object,System.Int32)">
            <summary>
            将object转化为整数 若值不是数字返回defaultValue
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetInt(System.String)">
            <summary>
            将字符串转化为整数 若值不是数字返回0
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetInt(System.Object)">
            <summary>
            将object转化为整数 若值不是数字返回0
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetIntByDecimal(System.String)">
            <summary>
            把decimal类型的字符串转为整数，四舍五入
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetIntNull(System.String,System.Nullable{System.Int32})">
            <summary>
            将字符串转化为Int可空类型，若不是数字指定的defaultValue
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetIntNull(System.String)">
            <summary>
            将字符串转化为Int可空类型，若不是数字返回null的Int?.
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetIntNullArrayByStringArray(System.String[])">
            <summary>
            将字符串数组转为int?数组（如果某项转换失败，则该项为Null）
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetIntArrayByStringArray(System.String[])">
            <summary>
            将字符串数组转为INT数组(若某项转换失败则该项为0)
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetIntArrayByStringArray(System.String[],System.Int32)">
            <summary>
            将字符串数组转为INT数组(若某项转换失败则该项为默认值)
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetLong(System.String,System.Int64)">
            <summary>
            将字符串转化为整数若值不是数字返回defaultValue
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetLong(System.Object,System.Int64)">
            <summary>
            将object转化为整数 若值不是数字返回defaultValue
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetLong(System.String)">
            <summary>
            将字符串转化为整数 若值不是数字返回0
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetLong(System.Object)">
            <summary>
            将object转化为整数 若值不是数字返回0
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetLongByDecimal(System.String)">
            <summary>
            把decimal类型的字符串转为整数，四舍五入
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetLongNull(System.String,System.Nullable{System.Int64})">
            <summary>
            将字符串转化为Long可空类型，若不是数字指定的defaultValue
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetLongNull(System.String)">
            <summary>
            将字符串转化为Long可空类型，若不是数字返回null的Long?.
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetLongNullArrayByStringArray(System.String[])">
            <summary>
            将字符串数组转为long?数组（如果某项转换失败，则该项为Null）
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetLongArrayByStringArray(System.String[])">
            <summary>
            将字符串数组转为long数组(若某项转换失败则该项为0)
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetLongArrayByStringArray(System.String[],System.Int64)">
            <summary>
            将字符串数组转为long数组(若某项转换失败则该项为默认值)
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetBool(System.Object)">
            <summary>
            返回bool
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetDateTimeNullable(System.String)">
            <summary>
            将字符串转换为可空的日期类型，如果字符串不是有效的日期格式，则返回null
            </summary>
            <param name="s">进行转换的字符串</param>
            <returns></returns>
        </member>
        <!-- 对于成员“M:XCLNetTools.StringHander.Common.GetDateTimeNullable(System.String,System.Nullable{System.DateTime})”忽略有格式错误的 XML 注释 -->
        <member name="M:XCLNetTools.StringHander.Common.GetStartEndDateTimeNullable(System.String,System.String)">
            <summary>
            将字符串转换为可空的日期类型，如果字符串不是有效的日期格式，则返回null
            type，"start"：将此时间设置为yyyy-MM-dd 00:00:00；"end"：yyyy-MM-dd 23:59:59
            </summary>
            <param name="s">进行转换的字符串</param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetDateTime(System.String,System.DateTime)">
            <summary>
            转换时间 转换失败则为默认值 
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetDateTime(System.String)">
            <summary>
            转换为DateTime,若转换失败，则取DateTime.MinValue
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetDecimal(System.String,System.Decimal)">
            <summary>
             将字符串转化为浮点数 若值不是浮点数返回defaultValue
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetDecimal(System.Object,System.Decimal)">
            <summary>
             将object转化为浮点数 若值不是浮点数返回defaultValue
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetDecimal(System.String)">
            <summary>
             将字符串转化为浮点数 若值不是浮点数返回0
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetDecimal(System.Object)">
            <summary>
             将object转化为浮点数 若值不是浮点数返回0
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetDecimal(System.Object,System.Nullable{System.Decimal})">
            <summary>
            转换为可空的Decimal类型
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetDecimalNull(System.String)">
            <summary>
            转换为可空类型，转换失败则返回null
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetPercent(System.Nullable{System.Decimal},System.Int32)">
            <summary>
            返回百分制
            </summary>
            <param name="m"></param>
            <param name="count">保留几位小数</param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetColors">
            <summary>
            返回指定颜色中的随机颜色(按顺序循环出现)
            </summary>
            <returns>颜色编码，如：1941A5</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetFileSize(System.Decimal,System.Int32)">
            <summary>
            返回文件大小KB,MB,GB,TB形式的表示
            </summary>
            <param name="size">kb</param>
            <param name="count">保留几位小数</param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetTimeSub(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            返回指定时间段内不包括某一时间段的时间差（以小时为单位）
            </summary>
            <param name="start">开始时间</param>
            <param name="end">结束时间</param>
            <param name="workStart">排除的时间段（开始）如:"08:00"</param>
            <param name="workEnd">排除的时间段（结束）如:"18:00"</param>
            <returns>decimal（小时）</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetTimeSubList(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            返回指定时间段内拆分后的的时间差（以小时为单位）的list
            </summary>
            <param name="start">开始时间</param>
            <param name="end">结束时间</param>
            <param name="workStart">排除的时间段（开始）如:"08:00"</param>
            <param name="workEnd">排除的时间段（结束）如:"18:00"</param>
            <returns>decimal（小时）</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetTimeStr(System.Decimal,System.Int32)">
            <summary>
            返回汉字表示的时间（如1年3个月5天3小时）
            </summary>
            <param name="hour">小时</param>
            <param name="oneDayHour">一天几小时（灵活，如上班时间为一天7小时）</param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.ResponseClearWrite(System.String)">
            <summary>
            输出
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetSqlWhere(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            在原有的SQL中的where用AND拼接起来（只是简单的拼接），注意，字符串请带上引号,如lst[0]="UnitName='XXX'"
            如lst中有多个条件，就把它们用AND联接起来
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetFormQuerySql(System.String,System.Collections.Generic.List{XCLNetTools.PublicClass.FormQuery})">
            <summary>
            将传统查询条件转为SQL语句(用于直接输入，无需指定条件的查询),并拼接在原来的WHERE后面。
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetColIndex(System.Data.DataTable,System.Int32,System.String)">
            <summary>
            根据dt和指定行号和列名，返回该列的列号.若找不到该列，则返回-1
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetStartEndNum(System.Int32,System.Int32,System.Int32[])">
            <summary>
            指定起始数字，返回这些数据的List
            </summary>
            <param name="startNum">开始数字</param>
            <param name="endNum">结束数字</param>
            <param name="step">步长,默认为1</param>
            <returns>如：(0,5,1),则返回0,1,2,3,4,5的list</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetHiddenHtml(System.Collections.Generic.List{System.Web.UI.WebControls.ListItem})">
            <summary>
            把lst中的项生成input hidden标签
            </summary>
            <param name="lst">Text:hidden的name名字；Value:hidden的value</param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetHiddenHtml(System.String,System.String)">
            <summary>
            返回hidden
            </summary>
        </member>
        <member name="P:XCLNetTools.StringHander.Common.RootURL">
            <summary>
            网站根路径
            </summary>
        </member>
        <member name="T:XCLNetTools.FileHandler.UploadImg">
             <summary>
             图片上传类
            by:xucongli  @2012  
            http://blog.csdn.net/luoyeyu1989
             </summary>
        </member>
        <member name="F:XCLNetTools.FileHandler.UploadImg._MSG">
            <summary>
            信息
            </summary>
        </member>
        <member name="F:XCLNetTools.FileHandler.UploadImg._tprefix">
            <summary>
            缩略图前缀
            </summary>
        </member>
        <member name="F:XCLNetTools.FileHandler.UploadImg._limitwidth">
            <summary>
            原图最大宽度
            </summary>
        </member>
        <member name="F:XCLNetTools.FileHandler.UploadImg._limitheight">
            <summary>
            原图最大高度
            </summary>
        </member>
        <member name="F:XCLNetTools.FileHandler.UploadImg._twidth">
            <summary>
            缩略图最大宽度
            </summary>
        </member>
        <member name="F:XCLNetTools.FileHandler.UploadImg._theight">
            <summary>
            缩略图最大高度
            </summary>
        </member>
        <member name="F:XCLNetTools.FileHandler.UploadImg._size">
            <summary>
            文件大小
            </summary>
        </member>
        <member name="F:XCLNetTools.FileHandler.UploadImg._israte">
            <summary>
            是否成比例
            </summary>
        </member>
        <member name="F:XCLNetTools.FileHandler.UploadImg._iscreate">
            <summary>
            是否生成缩略图
            </summary>
        </member>
        <member name="F:XCLNetTools.FileHandler.UploadImg._path">
            <summary>
            存放图片的文件夹名称
            </summary>
        </member>
        <member name="F:XCLNetTools.FileHandler.UploadImg._OFileName">
            <summary>
            原图名称
            </summary>
        </member>
        <member name="M:XCLNetTools.FileHandler.UploadImg.UpLoadIMG(System.Web.UI.WebControls.FileUpload)">
            <summary>
            图片上传(默认:"等比压缩,限定上传尺寸2048*1536,缩略图尺寸100*100,限定上传大小1MB,存放在根目录upload中")
            </summary>
            <param name="UploadFile">文件上传控件</param>
            <returns>返回是否成功保存图片</returns>
        </member>
        <member name="T:XCLNetTools.FileHandler.UploadEventArgs">
            <summary>    
            上传数据参数    
            </summary>    
        </member>
        <member name="P:XCLNetTools.FileHandler.UploadEventArgs.BytesSent">
            <summary>    
            已发送的字节数    
            </summary>    
        </member>
        <member name="P:XCLNetTools.FileHandler.UploadEventArgs.TotalBytes">
            <summary>    
            总字节数    
            </summary>    
        </member>
        <member name="T:XCLNetTools.FileHandler.DownloadEventArgs">
            <summary>    
            下载数据参数    
            </summary>    
        </member>
        <member name="P:XCLNetTools.FileHandler.DownloadEventArgs.BytesReceived">
            <summary>    
            已接收的字节数    
            </summary>    
        </member>
        <member name="P:XCLNetTools.FileHandler.DownloadEventArgs.TotalBytes">
            <summary>    
            总字节数    
            </summary>    
        </member>
        <member name="P:XCLNetTools.FileHandler.DownloadEventArgs.ReceivedData">
            <summary>    
            当前缓冲区接收的数据    
            </summary>    
        </member>
        <member name="T:XCLNetTools.FileHandler.WebClient">
            <summary>
            WebClient
            </summary>
        </member>
        <member name="M:XCLNetTools.FileHandler.WebClient.#ctor">
            <summary>    
            创建WebClient的实例    
            </summary>    
        </member>
        <member name="M:XCLNetTools.FileHandler.WebClient.GetHtml(System.String)">
            <summary>    
             获取网页源代码    
            </summary>    
            <param name="url">网址</param>    
            <returns></returns>    
        </member>
        <member name="M:XCLNetTools.FileHandler.WebClient.DownloadFile(System.String,System.String)">
            <summary>    
            下载文件    
            </summary>    
            <param name="url">文件URL地址</param>    
            <param name="filename">文件保存完整路径</param>    
        </member>
        <member name="M:XCLNetTools.FileHandler.WebClient.GetData(System.String)">
            <summary>    
            从指定URL下载数据    
            </summary>    
            <param name="url">网址</param>    
            <returns></returns>    
        </member>
        <member name="M:XCLNetTools.FileHandler.WebClient.Post(System.String,System.String)">
            <summary>    
            向指定URL发送文本数据    
            </summary>    
            <param name="url">网址</param>    
            <param name="postData">urlencode编码的文本数据</param>    
            <returns></returns>    
        </member>
        <member name="M:XCLNetTools.FileHandler.WebClient.Post(System.String,System.Byte[])">
            <summary>    
            向指定URL发送字节数据    
            </summary>    
            <param name="url">网址</param>    
            <param name="postData">发送的字节数组</param>    
            <returns></returns>    
        </member>
        <member name="M:XCLNetTools.FileHandler.WebClient.Post(System.String,XCLNetTools.FileHandler.MultipartForm)">
            <summary>    
            向指定网址发送mulitpart编码的数据    
            </summary>    
            <param name="url">网址</param>    
            <param name="mulitpartForm">mulitpart form data</param>    
            <returns></returns>    
        </member>
        <member name="M:XCLNetTools.FileHandler.WebClient.GetData(System.Net.HttpWebRequest)">
            <summary>    
            读取请求返回的数据    
            </summary>    
            <param name="request">请求对象</param>    
            <returns></returns>    
        </member>
        <member name="M:XCLNetTools.FileHandler.WebClient.PostData(System.Net.HttpWebRequest,System.Byte[])">
            <summary>    
            发送请求数据    
            </summary>    
            <param name="request">请求对象</param>    
            <param name="postData">请求发送的字节数组</param>    
        </member>
        <member name="M:XCLNetTools.FileHandler.WebClient.CreateRequest(System.String,System.String)">
            <summary>    
            创建HTTP请求    
            </summary>    
            <param name="url">URL地址</param>    
            <returns></returns>    
        </member>
        <member name="M:XCLNetTools.FileHandler.WebClient.SaveCookiesToDisk">
            <summary>    
            将Cookie保存到磁盘    
            </summary>    
        </member>
        <member name="M:XCLNetTools.FileHandler.WebClient.LoadCookiesFromDisk">
            <summary>    
            从磁盘加载Cookie    
            </summary>    
        </member>
        <member name="P:XCLNetTools.FileHandler.WebClient.BufferSize">
            <summary>    
            设置发送和接收的数据缓冲大小    
            </summary>    
        </member>
        <member name="P:XCLNetTools.FileHandler.WebClient.ResponseHeaders">
            <summary>    
            获取响应头集合    
            </summary>    
        </member>
        <member name="P:XCLNetTools.FileHandler.WebClient.RequestHeaders">
            <summary>    
            获取请求头集合    
            </summary>    
        </member>
        <member name="P:XCLNetTools.FileHandler.WebClient.Proxy">
            <summary>    
            获取或设置代理    
            </summary>    
        </member>
        <member name="P:XCLNetTools.FileHandler.WebClient.Encoding">
            <summary>    
            获取或设置请求与响应的文本编码方式    
            </summary>    
        </member>
        <member name="P:XCLNetTools.FileHandler.WebClient.RespHtml">
            <summary>    
            获取或设置响应的html代码    
            </summary>    
        </member>
        <member name="P:XCLNetTools.FileHandler.WebClient.CookieContainer">
            <summary>    
            获取或设置与请求关联的Cookie容器    
            </summary>    
        </member>
        <member name="T:XCLNetTools.FileHandler.MultipartForm">
            <summary>    
            对文件和文本数据进行Multipart形式的编码    
            </summary>    
        </member>
        <member name="M:XCLNetTools.FileHandler.MultipartForm.#ctor">
            <summary>    
            实例化    
            </summary>    
        </member>
        <member name="M:XCLNetTools.FileHandler.MultipartForm.AddFlie(System.String,System.String)">
            <summary>    
            添加一个文件    
            </summary>    
            <param name="name">文件域名称</param>    
            <param name="filename">文件的完整路径</param>    
        </member>
        <member name="M:XCLNetTools.FileHandler.MultipartForm.AddFlie(System.String,System.String,System.Byte[],System.Int32)">
            <summary>    
            添加一个文件    
            </summary>    
            <param name="name">文件域名称</param>    
            <param name="filename">文件名</param>    
            <param name="fileData">文件二进制数据</param>    
            <param name="dataLength">二进制数据大小</param>    
        </member>
        <member name="M:XCLNetTools.FileHandler.MultipartForm.AddString(System.String,System.String)">
            <summary>    
            添加字符串    
            </summary>    
            <param name="name">文本域名称</param>    
            <param name="value">文本值</param>    
        </member>
        <member name="M:XCLNetTools.FileHandler.MultipartForm.GetContentType(System.String)">
            <summary>    
            从注册表获取文件类型    
            </summary>    
            <param name="filename">包含扩展名的文件名</param>    
            <returns>如：application/stream</returns>    
        </member>
        <member name="P:XCLNetTools.FileHandler.MultipartForm.FormData">
            <summary>    
            获取编码后的字节数组    
            </summary>    
        </member>
        <member name="P:XCLNetTools.FileHandler.MultipartForm.ContentType">
            <summary>    
            获取此编码内容的类型    
            </summary>    
        </member>
        <member name="P:XCLNetTools.FileHandler.MultipartForm.StringEncoding">
            <summary>    
            获取或设置对字符串采用的编码类型    
            </summary>    
        </member>
        <member name="M:XCLNetTools.Mail.MyEmail.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="server">发件箱的邮件服务器地址</param>
            <param name="toMail">收件人地址（可以是多个收件人，程序中是以“;"进行区分的）</param>
            <param name="fromMail">发件人地址</param>
            <param name="subject">邮件标题</param>
            <param name="emailBody">邮件内容（可以以html格式进行设计）</param>
            <param name="displayName">发送后显示发送人邮件地址的别名</param>
            <param name="username">发件箱的用户名（即@符号前面的字符串，例如：hello@163.com，用户名为：hello）</param>
            <param name="password">发件人邮箱密码</param>
            <param name="port">发送邮件所用的端口号（htmp协议默认为25）</param>
            <param name="sslEnable">true表示对邮件内容进行socket层加密传输，false表示不加密</param>
            <param name="pwdCheckEnable">true表示对发件人邮箱进行密码验证，false表示不对发件人邮箱进行密码验证</param>
        </member>
        <member name="M:XCLNetTools.Mail.MyEmail.AddAttachments(System.String)">
            <summary>
            添加附件
            </summary>
            <param name="attachmentsPath">附件的路径集合，以分号分隔</param>
        </member>
        <member name="M:XCLNetTools.Mail.MyEmail.Send">
            <summary>
            邮件的发送
            </summary>
            <returns>true:发送成功</returns>
        </member>
        <member name="M:XCLNetTools.Mail.MyEmail.SendMail(System.String,System.String,System.String,System.String)">
            <summary>
            发送邮件
            </summary>
            <param name="to">收件人地址</param>
            <param name="title">标题</param>
            <param name="body">内容</param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.Mail.MyEmail.UpdateMailConfig(XCLNetTools.Mail.MailSetting)">
            <summary>
            更新邮件配置
            </summary>
        </member>
        <member name="P:XCLNetTools.Mail.MyEmail.GetMailXmlPath">
            <summary>
            邮件配置文件的路径
            </summary>
        </member>
        <member name="P:XCLNetTools.Mail.MyEmail.GetMailSetting">
            <summary>
            获取邮件配置
            </summary>
        </member>
        <member name="T:XCLNetTools.Mail.MailSetting">
            <summary>
            邮件配置参数实体
            </summary>
        </member>
        <member name="P:XCLNetTools.Mail.MailSetting.IsEnable">
            <summary>
            是否启用邮件
            </summary>
        </member>
        <member name="P:XCLNetTools.Mail.MailSetting.SmtpPort">
            <summary>
            端口
            </summary>
        </member>
        <member name="P:XCLNetTools.Mail.MailSetting.Server">
            <summary>
            邮件服务器地址
            </summary>
        </member>
        <member name="P:XCLNetTools.Mail.MailSetting.Authentication">
            <summary>
            是否验证发件人用户名和密码
            </summary>
        </member>
        <member name="P:XCLNetTools.Mail.MailSetting.From">
            <summary>
            发件人地址
            </summary>
        </member>
        <member name="P:XCLNetTools.Mail.MailSetting.ShowName">
            <summary>
            发件人地址的别名
            </summary>
        </member>
        <member name="P:XCLNetTools.Mail.MailSetting.Password">
            <summary>
            发件人密码
            </summary>
        </member>
        <member name="T:XCLNetTools.Json.NewtonsoftJsonHelper">
            <summary>
            Newtonsoft.Json帮助类
            </summary>
        </member>
        <member name="T:XCLNetTools.Json.IJson">
            <summary>
            json处理接口
            </summary>
        </member>
        <member name="M:XCLNetTools.Json.IJson.ConvertObjectToJson(System.Object)">
            <summary>
            对象转为json
            </summary>
        </member>
        <member name="M:XCLNetTools.Json.IJson.ConvertDataTableToJson(System.Data.DataTable,System.String)">
            <summary>
            DataTable转为json
            </summary>
        </member>
        <member name="M:XCLNetTools.Json.IJson.ConvertDataSetToJson(System.Data.DataSet,System.String)">
            <summary>
            DataSet转为json
            </summary>
        </member>
        <member name="M:XCLNetTools.Json.IJson.ConvertListToJson``1(System.Collections.Generic.IList{``0},System.String)">
            <summary>
            List转为json
            </summary>
        </member>
        <member name="T:XCLNetTools.StringHander.FormHelper">
            <summary>
            form表单相关
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetQueryOrFormString(System.String)">
            <summary>
            获取request参数，先取querystring,若没有，再取formstring，若没有，则为string.Empty
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetString(System.String)">
            <summary>
            获取string参数
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetIntNull(System.String)">
            <summary>
            获取int?参数
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetIntNull(System.String,System.Nullable{System.Int32})">
            <summary>
            获取int?参数，默认defaultValue
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetInt(System.String)">
            <summary>
            获取int参数，默认0
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetInt(System.String,System.Int32)">
            <summary>
            获取int参数，默认defaultValue
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetLongNull(System.String)">
            <summary>
            获取Long?参数
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetLongNull(System.String,System.Nullable{System.Int64})">
            <summary>
            获取Long?参数，默认defaultValue
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetLong(System.String)">
            <summary>
            获取long参数，默认0
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetLong(System.String,System.Int64)">
            <summary>
            获取long参数，默认defaultValue
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetFromParamsValudByPre(System.String)">
            <summary>
            根据表单控件的name前缀，获取它的value数组
            注意：请保证已存在的name值之间没有包含关系（如：txtName和txtNameFirst），否则数据会紊乱！
            </summary>
            <param name="preName">name值的前缀</param>
        </member>
        <member name="T:XCLNetTools.Message.Error.BaseException">
            <summary>
            自定义Exception类
            </summary>
        </member>
        <member name="M:XCLNetTools.Message.Error.BaseException.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:XCLNetTools.Message.Error.BaseException.#ctor(System.String)">
            <summary>
            构造函数，参考Exception的构造函数
            </summary>
        </member>
        <member name="M:XCLNetTools.Message.Error.BaseException.#ctor(System.String,System.Exception)">
            <summary>
            构造函数，参考Exception的构造函数
            </summary>
        </member>
        <member name="T:XCLNetTools.DataBase.MSSQL.SqlHelperParameterCache">
            <summary>
            SqlHelperParameterCache提供缓存存储过程参数,并能够在运行时从存储过程中探索参数. 
            </summary>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelperParameterCache.DiscoverSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary> 
            探索运行时的存储过程,返回SqlParameter参数数组. 
            初始化参数值为 DBNull.Value. 
            </summary> 
            <param name="connection">一个有效的数据库连接</param> 
            <param name="spName">存储过程名称</param> 
            <param name="includeReturnValueParameter">是否包含返回值参数</param> 
            <returns>返回SqlParameter参数数组</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelperParameterCache.CloneParameters(System.Data.SqlClient.SqlParameter[])">
            <summary> 
            SqlParameter参数数组的深层拷贝. 
            </summary> 
            <param name="originalParameters">原始参数数组</param> 
            <returns>返回一个同样的参数数组</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelperParameterCache.CacheParameterSet(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            追加参数数组到缓存. 
            </summary> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="commandText">存储过程名或SQL语句</param> 
            <param name="commandParameters">要缓存的参数数组</param> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelperParameterCache.GetCachedParameterSet(System.String,System.String)">
            <summary> 
            从缓存中获取参数数组. 
            </summary> 
            <param name="connectionString">一个有效的数据库连接字符</param> 
            <param name="commandText">存储过程名或SQL语句</param> 
            <returns>参数数组</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String)">
            <summary> 
            返回指定的存储过程的参数集 
            </summary> 
            <remarks> 
            这个方法将查询数据库,并将信息存储到缓存. 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符</param> 
            <param name="spName">存储过程名</param> 
            <returns>返回SqlParameter参数数组</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String,System.Boolean)">
            <summary> 
            返回指定的存储过程的参数集 
            </summary> 
            <remarks> 
            这个方法将查询数据库,并将信息存储到缓存. 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符.</param> 
            <param name="spName">存储过程名</param> 
            <param name="includeReturnValueParameter">是否包含返回值参数</param> 
            <returns>返回SqlParameter参数数组</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelperParameterCache.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String)">
            <summary> 
            [内部]返回指定的存储过程的参数集(使用连接对象). 
            </summary> 
            <remarks> 
            这个方法将查询数据库,并将信息存储到缓存. 
            </remarks> 
            <param name="connection">一个有效的数据库连接字符</param> 
            <param name="spName">存储过程名</param> 
            <returns>返回SqlParameter参数数组</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelperParameterCache.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary> 
            [内部]返回指定的存储过程的参数集(使用连接对象) 
            </summary> 
            <remarks> 
            这个方法将查询数据库,并将信息存储到缓存. 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名</param> 
            <param name="includeReturnValueParameter"> 
            是否包含返回值参数 
            </param> 
            <returns>返回SqlParameter参数数组</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelperParameterCache.GetSpParameterSetInternal(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary> 
            [私有]返回指定的存储过程的参数集(使用连接对象) 
            </summary> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名</param> 
            <param name="includeReturnValueParameter">是否包含返回值参数</param> 
            <returns>返回SqlParameter参数数组</returns> 
        </member>
        <member name="T:XCLNetTools.Control.Pagination.IPaginations.IPagination">
            <summary>
            分页接口
            </summary>
        </member>
        <member name="M:XCLNetTools.Control.Pagination.IPaginations.IPagination.InitPager">
            <summary>
            分页初始化
            </summary>
        </member>
        <member name="T:XCLNetTools.XML.XMLHelper">
            <summary>   
            XMLHelper XML文档操作管理器
            </summary>
        </member>
        <member name="M:XCLNetTools.XML.XMLHelper.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:XCLNetTools.XML.XMLHelper.GetXmlNodeByXpath(System.String,System.String)">
            <summary>   
            选择匹配XPath表达式的第一个节点XmlNode.   
            </summary>   
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>   
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名")</param>   
            <returns>返回XmlNode</returns>   
        </member>
        <member name="M:XCLNetTools.XML.XMLHelper.GetXmlNodeListByXpath(System.String,System.String)">
            <summary>   
            选择匹配XPath表达式的节点列表XmlNodeList.   
            </summary>   
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>   
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名")</param>   
            <returns>返回XmlNodeList</returns>   
        </member>
        <member name="M:XCLNetTools.XML.XMLHelper.GetXmlAttribute(System.String,System.String,System.String)">
            <summary>   
            选择匹配XPath表达式的第一个节点的匹配xmlAttributeName的属性XmlAttribute.   
            </summary>   
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>   
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名</param>   
            <param name="xmlAttributeName">要匹配xmlAttributeName的属性名称</param>   
            <returns>返回xmlAttributeName</returns>   
        </member>
        <member name="M:XCLNetTools.XML.XMLHelper.CreateXmlDocument(System.String,System.String,System.String,System.String,System.String)">
            <summary>   
            创建一个XML文档   
            </summary>   
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>   
            <param name="rootNodeName">XML文档根节点名称(须指定一个根节点名称)</param>   
            <param name="version">XML文档版本号(必须为:"1.0")</param>   
            <param name="encoding">XML文档编码方式</param>   
            <param name="standalone">该值必须是"yes"或"no",如果为null,Save方法不在XML声明上写出独立属性</param>   
            <returns>成功返回true,失败返回false</returns>   
        </member>
        <member name="M:XCLNetTools.XML.XMLHelper.CreateXmlNodeByXPath(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>   
            依据匹配XPath表达式的第一个节点来创建它的子节点(如果此节点已存在则追加一个新的同名节点   
            </summary>   
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>   
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名</param>   
            <param name="xmlNodeName">要匹配xmlNodeName的节点名称</param>   
            <param name="innerText">节点文本值</param>   
            <param name="xmlAttributeName">要匹配xmlAttributeName的属性名称</param>   
            <param name="value">属性值</param>   
            <returns>成功返回true,失败返回false</returns>   
        </member>
        <member name="M:XCLNetTools.XML.XMLHelper.CreateOrUpdateXmlNodeByXPath(System.String,System.String,System.String,System.String)">
            <summary>   
            依据匹配XPath表达式的第一个节点来创建或更新它的子节点(如果节点存在则更新,不存在则创建)   
            </summary>   
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>   
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名</param>   
            <param name="xmlNodeName">要匹配xmlNodeName的节点名称</param>   
            <param name="innerText">节点文本值</param>   
            <returns>成功返回true,失败返回false</returns>   
        </member>
        <member name="M:XCLNetTools.XML.XMLHelper.CreateOrUpdateXmlAttributeByXPath(System.String,System.String,System.String,System.String)">
            <summary>   
            依据匹配XPath表达式的第一个节点来创建或更新它的属性(如果属性存在则更新,不存在则创建)   
            </summary>   
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>   
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名</param>   
            <param name="xmlAttributeName">要匹配xmlAttributeName的属性名称</param>   
            <param name="value">属性值</param>   
            <returns>成功返回true,失败返回false</returns>   
        </member>
        <member name="M:XCLNetTools.XML.XMLHelper.DeleteXmlNodeByXPath(System.String,System.String)">
            <summary>   
            删除匹配XPath表达式的第一个节点(节点中的子元素同时会被删除)   
            </summary>   
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>   
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名</param>   
            <returns>成功返回true,失败返回false</returns>   
        </member>
        <member name="M:XCLNetTools.XML.XMLHelper.DeleteXmlAttributeByXPath(System.String,System.String,System.String)">
            <summary>   
            删除匹配XPath表达式的第一个节点中的匹配参数xmlAttributeName的属性   
            </summary>   
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>   
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名</param>   
            <param name="xmlAttributeName">要删除的xmlAttributeName的属性名称</param>   
            <returns>成功返回true,失败返回false</returns>   
        </member>
        <member name="M:XCLNetTools.XML.XMLHelper.DeleteAllXmlAttributeByXPath(System.String,System.String)">
            <summary>   
            删除匹配XPath表达式的第一个节点中的所有属性   
            </summary>   
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>   
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名</param>   
            <returns>成功返回true,失败返回false</returns>   
        </member>
        <member name="M:XCLNetTools.XML.XMLHelper.UpdateXMLNodeInnerText(System.String,System.String,System.String)">
            <summary>
            更新指定xpath节点的innerText
            </summary>
        </member>
        <member name="T:XCLNetTools.StringHander.HashEncode">
            <summary>
            得到随机安全码（哈希加密）。
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.HashEncode.GetSecurity">
            <summary>
            得到随机哈希加密字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.StringHander.HashEncode.GetRandomValue">
            <summary>
            得到一个随机数值
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.StringHander.HashEncode.HashEncoding(System.String)">
            <summary>
            哈希加密一个字符串
            </summary>
            <param name="Security"></param>
            <returns></returns>
        </member>
        <member name="T:XCLNetTools.StringHander.DESEncrypt">
            <summary>
            DES加密/解密类。
            Copyright (C) Maticsoft
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.DESEncrypt.Encrypt(System.String)">
            <summary>
            加密
            </summary>
            <param name="Text"></param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.StringHander.DESEncrypt.Encrypt(System.String,System.String)">
            <summary> 
            加密数据 
            </summary> 
            <param name="Text"></param> 
            <param name="sKey"></param> 
            <returns></returns> 
        </member>
        <member name="M:XCLNetTools.StringHander.DESEncrypt.Decrypt(System.String)">
            <summary>
            解密
            </summary>
            <param name="Text"></param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.StringHander.DESEncrypt.Decrypt(System.String,System.String)">
            <summary> 
            解密数据 
            </summary> 
            <param name="Text"></param> 
            <param name="sKey"></param> 
            <returns></returns> 
        </member>
        <member name="T:XCLNetTools.StringHander.AESEncrypt">
            <summary>
            AES加密解密类
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.AESEncrypt.Encrypt(System.String,System.String)">
            <summary>
            指定密钥对明文进行AES加密
            </summary>
            <param name="s_crypto">明文</param>
            <param name="s_key">加密密钥</param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.StringHander.AESEncrypt.Encrypt(System.String)">
            <summary>
            动态生成密钥，并对明文进行AES加密
            </summary>
            <param name="s_crypto">明文</param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.StringHander.AESEncrypt.Decrypt(System.String)">
            <summary>
            从密文中解析出密钥，并对密文进行解密
            </summary>
            <param name="s_encrypted">密文</param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.StringHander.AESEncrypt.Decrypt(System.String,System.String)">
            <summary>
            指定密钥，并对密文进行解密
            </summary>
            <param name="s_encrypted">密文</param>
            <param name="s_key">密钥</param>
            <returns></returns>
        </member>
        <member name="P:XCLNetTools.StringHander.AESEncrypt.ContainKey">
            <summary>
            True：密文中包含密钥
            False：密文中不包含密钥
            </summary>
        </member>
        <member name="T:XCLNetTools.Message.MessageModel">
            <summary>
            消息提示实体类(用于json属性)
            </summary>
        </member>
        <member name="P:XCLNetTools.Message.MessageModel.Title">
            <summary>
            提示标题
            </summary>
        </member>
        <member name="P:XCLNetTools.Message.MessageModel.Date">
            <summary>
            消息提示时间
            </summary>
        </member>
        <member name="P:XCLNetTools.Message.MessageModel.Message">
            <summary>
            消息提示内容
            </summary>
        </member>
        <member name="P:XCLNetTools.Message.MessageModel.MessageMore">
            <summary>
            消息详细信息
            </summary>
        </member>
        <member name="P:XCLNetTools.Message.MessageModel.Url">
            <summary>
            消息发生页地址
            </summary>
        </member>
        <member name="P:XCLNetTools.Message.MessageModel.FromUrl">
            <summary>
            消息页来源地址(reffer)
            </summary>
        </member>
        <member name="P:XCLNetTools.Message.MessageModel.IsSuccess">
            <summary>
            是否成功与失败的标识
            </summary>
        </member>
        <member name="P:XCLNetTools.Message.MessageModel.IsRefresh">
            <summary>
            是否需要刷新
            </summary>
        </member>
        <member name="P:XCLNetTools.Message.MessageModel.Remark">
            <summary>
            备注信息
            </summary>
        </member>
        <member name="P:XCLNetTools.Message.MessageModel.CustomObject">
            <summary>
            自定义输出对象
            </summary>
        </member>
        <member name="T:XCLNetTools.Json.LitJsonHelper">
            <summary>
            LitJson帮助类
            </summary>
        </member>
        <member name="M:XCLNetTools.Json.LitJsonHelper.ConvertObjectToJson(System.Object)">
            <summary>
            对象转为json
            </summary>
        </member>
        <member name="M:XCLNetTools.Json.LitJsonHelper.ConvertDataTableToArray(System.Data.DataTable)">
            <summary>
            DataTable转为js的数组形式，若为空，则返回[]
            </summary>
        </member>
        <member name="M:XCLNetTools.Json.LitJsonHelper.ConvertDataTableToJson(System.Data.DataTable,System.String)">
            <summary>
            DataTable转为json
            </summary>
        </member>
        <member name="M:XCLNetTools.Json.LitJsonHelper.ConvertDataSetToArray(System.Data.DataSet)">
            <summary>
            DataSet转为js的数组形式，若为空，则返回[]
            </summary>
        </member>
        <member name="M:XCLNetTools.Json.LitJsonHelper.ConvertDataSetToJson(System.Data.DataSet,System.String)">
            <summary>
            DataSet转为json
            </summary>
        </member>
        <member name="M:XCLNetTools.Json.LitJsonHelper.ConvertListToJson``1(System.Collections.Generic.IList{``0},System.String)">
            <summary>
            List转为json
            </summary>
        </member>
        <member name="M:XCLNetTools.Json.LitJsonHelper.ConvertListToArray``1(System.Collections.Generic.IList{``0})">
            <summary>
            List转为数组，若为空，则直接返回[]
            </summary>
        </member>
        <member name="M:XCLNetTools.Json.LitJsonHelper.WriteFormat(LitJson.JsonWriter,System.String,System.String)">
            <summary>
            输出指定格式的数据
            <param name="dataType">数据类型</param>
            <param name="jw">JsonWriter对象</param>
            <param name="value">要转换的值</param>
            </summary>
        </member>
        <member name="T:XCLNetTools.Http.HttpHelper">
            <summary>
            Http连接操作帮助类
            </summary>
        </member>
        <member name="M:XCLNetTools.Http.HttpHelper.GetHtml(XCLNetTools.Http.HttpItem)">
            <summary>
            根据相传入的数据，得到相应页面数据
            </summary>
            <param name="item">参数类对象</param>
            <returns>返回HttpResult类型</returns>
        </member>
        <member name="M:XCLNetTools.Http.HttpHelper.GetMemoryStream(System.IO.Stream)">
            <summary>
            4.0以下.net版本取数据使用
            </summary>
            <param name="streamResponse">流</param>
        </member>
        <member name="M:XCLNetTools.Http.HttpHelper.SetRequest(XCLNetTools.Http.HttpItem)">
             <summary>
             为请求准备参数
             </summary>
            <param name="item">参数列表</param>
        </member>
        <member name="M:XCLNetTools.Http.HttpHelper.SetCer(XCLNetTools.Http.HttpItem)">
            <summary>
            设置证书
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:XCLNetTools.Http.HttpHelper.SetCerList(XCLNetTools.Http.HttpItem)">
            <summary>
            设置多个证书
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:XCLNetTools.Http.HttpHelper.SetCookie(XCLNetTools.Http.HttpItem)">
            <summary>
            设置Cookie
            </summary>
            <param name="item">Http参数</param>
        </member>
        <member name="M:XCLNetTools.Http.HttpHelper.SetPostData(XCLNetTools.Http.HttpItem)">
            <summary>
            设置Post数据
            </summary>
            <param name="item">Http参数</param>
        </member>
        <member name="M:XCLNetTools.Http.HttpHelper.SetProxy(XCLNetTools.Http.HttpItem)">
            <summary>
            设置代理
            </summary>
            <param name="item">参数对象</param>
        </member>
        <member name="M:XCLNetTools.Http.HttpHelper.CheckValidationResult(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            回调验证证书问题
            </summary>
            <param name="sender">流对象</param>
            <param name="certificate">证书</param>
            <param name="chain">X509Chain</param>
            <param name="errors">SslPolicyErrors</param>
            <returns>bool</returns>
        </member>
        <member name="T:XCLNetTools.Http.HttpItem">
            <summary>
            Http请求参考类
            </summary>
        </member>
        <member name="P:XCLNetTools.Http.HttpItem.URL">
            <summary>
            请求URL必须填写
            </summary>
        </member>
        <member name="P:XCLNetTools.Http.HttpItem.Method">
            <summary>
            请求方式默认为GET方式,当为POST方式时必须设置Postdata的值
            </summary>
        </member>
        <member name="P:XCLNetTools.Http.HttpItem.Timeout">
            <summary>
            默认请求超时时间
            </summary>
        </member>
        <member name="P:XCLNetTools.Http.HttpItem.ReadWriteTimeout">
            <summary>
            默认写入Post数据超时间
            </summary>
        </member>
        <member name="P:XCLNetTools.Http.HttpItem.KeepAlive">
            <summary>
             获取或设置一个值，该值指示是否与 Internet 资源建立持久性连接默认为true。
            </summary>
        </member>
        <member name="P:XCLNetTools.Http.HttpItem.Accept">
            <summary>
            请求标头值 默认为text/html, application/xhtml+xml, */*
            </summary>
        </member>
        <member name="P:XCLNetTools.Http.HttpItem.ContentType">
            <summary>
            请求返回类型默认 text/html
            </summary>
        </member>
        <member name="P:XCLNetTools.Http.HttpItem.UserAgent">
            <summary>
            客户端访问信息默认Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)
            </summary>
        </member>
        <member name="P:XCLNetTools.Http.HttpItem.Encoding">
            <summary>
            返回数据编码默认为NUll,可以自动识别,一般为utf-8,gbk,gb2312
            </summary>
        </member>
        <member name="P:XCLNetTools.Http.HttpItem.PostDataType">
            <summary>
            Post的数据类型
            </summary>
        </member>
        <member name="P:XCLNetTools.Http.HttpItem.Postdata">
            <summary>
            Post请求时要发送的字符串Post数据
            </summary>
        </member>
        <member name="P:XCLNetTools.Http.HttpItem.PostdataByte">
            <summary>
            Post请求时要发送的Byte类型的Post数据
            </summary>
        </member>
        <member name="P:XCLNetTools.Http.HttpItem.CookieCollection">
            <summary>
            Cookie对象集合
            </summary>
        </member>
        <member name="P:XCLNetTools.Http.HttpItem.Cookie">
            <summary>
            请求时的Cookie
            </summary>
        </member>
        <member name="P:XCLNetTools.Http.HttpItem.Referer">
            <summary>
            来源地址，上次访问地址
            </summary>
        </member>
        <member name="P:XCLNetTools.Http.HttpItem.CerPath">
            <summary>
            证书绝对路径
            </summary>
        </member>
        <member name="P:XCLNetTools.Http.HttpItem.IsToLower">
            <summary>
            是否设置为全文小写，默认为不转化
            </summary>
        </member>
        <member name="P:XCLNetTools.Http.HttpItem.Allowautoredirect">
            <summary>
            支持跳转页面，查询结果将是跳转后的页面，默认是不跳转
            </summary>
        </member>
        <member name="P:XCLNetTools.Http.HttpItem.Connectionlimit">
            <summary>
            最大连接数
            </summary>
        </member>
        <member name="P:XCLNetTools.Http.HttpItem.ProxyUserName">
            <summary>
            代理Proxy 服务器用户名
            </summary>
        </member>
        <member name="P:XCLNetTools.Http.HttpItem.ProxyPwd">
            <summary>
            代理 服务器密码
            </summary>
        </member>
        <member name="P:XCLNetTools.Http.HttpItem.ProxyIp">
            <summary>
            代理 服务IP
            </summary>
        </member>
        <member name="P:XCLNetTools.Http.HttpItem.ResultType">
            <summary>
            设置返回类型String和Byte
            </summary>
        </member>
        <member name="P:XCLNetTools.Http.HttpItem.Header">
            <summary>
            header对象
            </summary>
        </member>
        <!-- 对于成员“P:XCLNetTools.Http.HttpItem.ProtocolVersion”忽略有格式错误的 XML 注释 -->
        <member name="P:XCLNetTools.Http.HttpItem.Expect100Continue">
            <summary>
             获取或设置一个 System.Boolean 值，该值确定是否使用 100-Continue 行为。如果 POST 请求需要 100-Continue 响应，则为 true；否则为 false。默认值为 true。
            </summary>
        </member>
        <member name="P:XCLNetTools.Http.HttpItem.ClentCertificates">
            <summary>
            设置509证书集合
            </summary>
        </member>
        <member name="P:XCLNetTools.Http.HttpItem.PostEncoding">
            <summary>
            设置或获取Post参数编码,默认的为Default编码
            </summary>
        </member>
        <member name="T:XCLNetTools.Http.HttpResult">
            <summary>
            Http返回参数类
            </summary>
        </member>
        <member name="P:XCLNetTools.Http.HttpResult.Cookie">
            <summary>
            Http请求返回的Cookie
            </summary>
        </member>
        <member name="P:XCLNetTools.Http.HttpResult.CookieCollection">
            <summary>
            Cookie对象集合
            </summary>
        </member>
        <member name="P:XCLNetTools.Http.HttpResult.Html">
            <summary>
            返回的String类型数据 只有ResultType.String时才返回数据，其它情况为空
            </summary>
        </member>
        <member name="P:XCLNetTools.Http.HttpResult.ResultByte">
            <summary>
            返回的Byte数组 只有ResultType.Byte时才返回数据，其它情况为空
            </summary>
        </member>
        <member name="P:XCLNetTools.Http.HttpResult.Header">
            <summary>
            header对象
            </summary>
        </member>
        <member name="P:XCLNetTools.Http.HttpResult.StatusDescription">
            <summary>
            返回状态说明
            </summary>
        </member>
        <member name="P:XCLNetTools.Http.HttpResult.StatusCode">
            <summary>
            返回状态码,默认为OK
            </summary>
        </member>
        <member name="T:XCLNetTools.Http.ResultType">
            <summary>
            返回类型
            </summary>
        </member>
        <member name="F:XCLNetTools.Http.ResultType.String">
            <summary>
            表示只返回字符串 只有Html有数据
            </summary>
        </member>
        <member name="F:XCLNetTools.Http.ResultType.Byte">
            <summary>
            表示返回字符串和字节流 ResultByte和Html都有数据返回
            </summary>
        </member>
        <member name="T:XCLNetTools.Http.PostDataType">
            <summary>
            Post的数据格式默认为string
            </summary>
        </member>
        <member name="F:XCLNetTools.Http.PostDataType.String">
            <summary>
            字符串类型，这时编码Encoding可不设置
            </summary>
        </member>
        <member name="F:XCLNetTools.Http.PostDataType.Byte">
            <summary>
            Byte类型，需要设置PostdataByte参数的值编码Encoding可设置为空
            </summary>
        </member>
        <member name="F:XCLNetTools.Http.PostDataType.FilePath">
            <summary>
            传文件，Postdata必须设置为文件的绝对路径，必须设置Encoding的值
            </summary>
        </member>
        <member name="T:XCLNetTools.Http.HttpCookieHelper">
            <summary>
            Cookie操作帮助类
            </summary>
        </member>
        <member name="M:XCLNetTools.Http.HttpCookieHelper.GetCookieList(System.String)">
            <summary>
            根据字符生成Cookie列表
            </summary>
            <param name="cookie">Cookie字符串</param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.Http.HttpCookieHelper.GetCookieValue(System.String,System.String)">
            <summary>
            根据Key值得到Cookie值,Key不区分大小写
            </summary>
            <param name="Key">key</param>
            <param name="cookie">字符串Cookie</param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.Http.HttpCookieHelper.CookieFormat(System.String,System.String)">
            <summary>
            格式化Cookie为标准格式
            </summary>
            <param name="key">Key值</param>
            <param name="value">Value值</param>
            <returns></returns>
        </member>
        <member name="T:XCLNetTools.DataHandler.ExcelToData">
            <summary>
            excel读取类
            </summary>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelToData.ReadExcelToTable(System.String)">
            <summary>
            单个工作薄读入（第一个可见的sheet）
            <param name="excelfilePath">文件路径</param>
            </summary>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelToData.ReadExcelToDataSet(System.String)">
            <summary>
            将多个工作薄导入到DS中（所有可见的sheet）
            <param name="excelfilePath">文件路径</param>
            </summary>
        </member>
        <member name="T:XCLNetTools.DataBase.MSSQL.SqlHelper">
            <summary>
            微软SQLHelper
            </summary>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.AttachParameters(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            将SqlParameter参数数组(参数值)分配给SqlCommand命令. 
            这个方法将给任何一个参数分配DBNull.Value; 
            该操作将阻止默认值的使用. 
            </summary> 
            <param name="command">命令名</param> 
            <param name="commandParameters">SqlParameters数组</param> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Data.DataRow)">
            <summary> 
            将DataRow类型的列值分配到SqlParameter参数数组. 
            </summary> 
            <param name="commandParameters">要分配值的SqlParameter参数数组</param> 
            <param name="dataRow">将要分配给存储过程参数的DataRow</param> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Object[])">
            <summary> 
            将一个对象数组分配给SqlParameter参数数组. 
            </summary> 
            <param name="commandParameters">要分配值的SqlParameter参数数组</param> 
            <param name="parameterValues">将要分配给存储过程参数的对象数组</param> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.PrepareCommand(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],System.Boolean@)">
            <summary> 
            预处理用户提供的命令,数据库连接/事务/命令类型/参数 
            </summary> 
            <param name="command">要处理的SqlCommand</param> 
            <param name="connection">数据库连接</param> 
            <param name="transaction">一个有效的事务或者是null值</param> 
            <param name="commandType">命令类型 (存储过程,命令文本, 其它.)</param> 
            <param name="commandText">存储过程名或都T-SQL命令文本</param> 
            <param name="commandParameters">和命令相关联的SqlParameter参数数组,如果没有参数为'null'</param> 
            <param name="mustCloseConnection"><c>true</c> 如果连接是打开的,则为true,其它情况下为false.</param> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.GetConnSting">
            <summary> 
            一个有效的数据库连接字符串 
            </summary> 
            <returns></returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.GetConnection">
            <summary> 
            一个有效的数据库连接对象 
            </summary> 
            <returns></returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary> 
            执行指定连接字符串,类型的SqlCommand. 
            </summary> 
            <remarks> 
            示例:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders"); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="commandType">命令类型 (存储过程,命令文本, 其它.)</param> 
            <param name="commandText">存储过程名称或SQL语句</param> 
            <returns>返回命令影响的行数</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行指定连接字符串,类型的SqlCommand.如果没有提供参数,不返回结果. 
            </summary> 
            <remarks> 
            示例:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="commandType">命令类型 (存储过程,命令文本, 其它.)</param> 
            <param name="commandText">存储过程名称或SQL语句</param> 
            <param name="commandParameters">SqlParameter参数数组</param> 
            <returns>返回命令影响的行数</returns> 
        </member>
        <!-- 对于成员“M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteNonQuery(System.String,System.String,System.Object[])”忽略有格式错误的 XML 注释 -->
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary> 
            执行指定数据库连接对象的命令 
            </summary> 
            <remarks> 
            示例:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders"); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型(存储过程,命令文本或其它.)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <returns>返回影响的行数</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行指定数据库连接对象的命令 
            </summary> 
            <remarks> 
            示例:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型(存储过程,命令文本或其它.)</param> 
            <param name="commandText">T存储过程名称或T-SQL语句</param> 
            <param name="commandParameters">SqlParamter参数数组</param> 
            <returns>返回影响的行数</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary> 
            执行指定数据库连接对象的命令,将对象数组的值赋给存储过程参数. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值 
            示例:  
             int result = ExecuteNonQuery(conn, "PublishOrders", 24, 36); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回影响的行数</returns> 
        </member>
        <!-- 对于成员“M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)”忽略有格式错误的 XML 注释 -->
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行带事务的SqlCommand(指定参数). 
            </summary> 
            <remarks> 
            示例:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="transaction">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型(存储过程,命令文本或其它.)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <param name="commandParameters">SqlParamter参数数组</param> 
            <returns>返回影响的行数</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary> 
            执行带事务的SqlCommand(指定参数值). 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值 
            示例:  
             int result = ExecuteNonQuery(conn, trans, "PublishOrders", 24, 36); 
            </remarks> 
            <param name="transaction">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回受影响的行数</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
            <summary> 
            执行指定数据库连接字符串的命令,返回DataSet. 
            </summary> 
            <remarks> 
            示例:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders"); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <returns>返回一个包含结果集的DataSet</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行指定数据库连接字符串的命令,返回DataSet. 
            </summary> 
            <remarks> 
            示例: 
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <param name="commandParameters">SqlParamters参数数组</param> 
            <returns>返回一个包含结果集的DataSet</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteDataset(System.String,System.String,System.Object[])">
            <summary> 
            执行指定数据库连接字符串的命令,直接提供参数值,返回DataSet. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值. 
            示例: 
             DataSet ds = ExecuteDataset(connString, "GetOrders", 24, 36); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="spName">存储过程名</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回一个包含结果集的DataSet</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary> 
            执行指定数据库连接对象的命令,返回DataSet. 
            </summary> 
            <remarks> 
            示例:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders"); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名或T-SQL语句</param> 
            <returns>返回一个包含结果集的DataSet</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行指定数据库连接对象的命令,指定存储过程参数,返回DataSet. 
            </summary> 
            <remarks> 
            示例:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名或T-SQL语句</param> 
            <param name="commandParameters">SqlParamter参数数组</param> 
            <returns>返回一个包含结果集的DataSet</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary> 
            执行指定数据库连接对象的命令,指定参数值,返回DataSet. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输入参数和返回值. 
            示例.:  
             DataSet ds = ExecuteDataset(conn, "GetOrders", 24, 36); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回一个包含结果集的DataSet</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary> 
            执行指定事务的命令,返回DataSet. 
            </summary> 
            <remarks> 
            示例:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders"); 
            </remarks> 
            <param name="transaction">事务</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名或T-SQL语句</param> 
            <returns>返回一个包含结果集的DataSet</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行指定事务的命令,指定参数,返回DataSet. 
            </summary> 
            <remarks> 
            示例:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="transaction">事务</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名或T-SQL语句</param> 
            <param name="commandParameters">SqlParamter参数数组</param> 
            <returns>返回一个包含结果集的DataSet</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary> 
            执行指定事务的命令,指定参数值,返回DataSet. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输入参数和返回值. 
            示例.:  
             DataSet ds = ExecuteDataset(trans, "GetOrders", 24, 36); 
            </remarks> 
            <param name="transaction">事务</param> 
            <param name="spName">存储过程名</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回一个包含结果集的DataSet</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],XCLNetTools.DataBase.MSSQL.SqlHelper.SqlConnectionOwnership)">
            <summary> 
            执行指定数据库连接对象的数据阅读器. 
            </summary> 
            <remarks> 
            如果是SqlHelper打开连接,当连接关闭DataReader也将关闭. 
            如果是调用都打开连接,DataReader由调用都管理. 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="transaction">一个有效的事务,或者为 'null'</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名或T-SQL语句</param> 
            <param name="commandParameters">SqlParameters参数数组,如果没有参数则为'null'</param> 
            <param name="connectionOwnership">标识数据库连接对象是由调用者提供还是由SqlHelper提供</param> 
            <returns>返回包含结果集的SqlDataReader</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary> 
            执行指定数据库连接字符串的数据阅读器. 
            </summary> 
            <remarks> 
            示例:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders"); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名或T-SQL语句</param> 
            <returns>返回包含结果集的SqlDataReader</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行指定数据库连接字符串的数据阅读器,指定参数. 
            </summary> 
            <remarks> 
            示例:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名或T-SQL语句</param> 
            <param name="commandParameters">SqlParamter参数数组(new SqlParameter("@prodid", 24))</param> 
            <returns>返回包含结果集的SqlDataReader</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteReader(System.String,System.String,System.Object[])">
            <summary> 
            执行指定数据库连接字符串的数据阅读器,指定参数值. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值参数. 
            示例:  
             SqlDataReader dr = ExecuteReader(connString, "GetOrders", 24, 36); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="spName">存储过程名</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回包含结果集的SqlDataReader</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary> 
            执行指定数据库连接对象的数据阅读器. 
            </summary> 
            <remarks> 
            示例:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders"); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名或T-SQL语句</param> 
            <returns>返回包含结果集的SqlDataReader</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            [调用者方式]执行指定数据库连接对象的数据阅读器,指定参数. 
            </summary> 
            <remarks> 
            示例:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandParameters">SqlParamter参数数组</param> 
            <returns>返回包含结果集的SqlDataReader</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary> 
            [调用者方式]执行指定数据库连接对象的数据阅读器,指定参数值. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值参数. 
            示例:  
             SqlDataReader dr = ExecuteReader(conn, "GetOrders", 24, 36); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">T存储过程名</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回包含结果集的SqlDataReader</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary> 
            [调用者方式]执行指定数据库事务的数据阅读器,指定参数值. 
            </summary> 
            <remarks> 
            示例:  
             SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders"); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <returns>返回包含结果集的SqlDataReader</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            [调用者方式]执行指定数据库事务的数据阅读器,指定参数. 
            </summary> 
            <remarks> 
            示例:  
              SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param> 
            <returns>返回包含结果集的SqlDataReader</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary> 
            [调用者方式]执行指定数据库事务的数据阅读器,指定参数值. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值参数. 
            
            示例:  
             SqlDataReader dr = ExecuteReader(trans, "GetOrders", 24, 36); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="spName">存储过程名称</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回包含结果集的SqlDataReader</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary> 
            执行指定数据库连接字符串的命令,返回结果集中的第一行第一列. 
            </summary> 
            <remarks> 
            示例:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount");
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行指定数据库连接字符串的命令,指定参数,返回结果集中的第一行第一列. 
            </summary> 
            <remarks> 
            示例:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteScalar(System.String,System.String,System.Object[])">
            <summary> 
            执行指定数据库连接字符串的命令,指定参数值,返回结果集中的第一行第一列. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值参数. 
            
            示例:  
             int orderCount = (int)ExecuteScalar(connString, "GetOrderCount", 24, 36); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="spName">存储过程名称</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary> 
            执行指定数据库连接对象的命令,返回结果集中的第一行第一列. 
            </summary> 
            <remarks> 
            示例:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount"); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行指定数据库连接对象的命令,指定参数,返回结果集中的第一行第一列. 
            </summary> 
            <remarks> 
            示例:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary> 
            执行指定数据库连接对象的命令,指定参数值,返回结果集中的第一行第一列. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值参数. 
            
            示例:  
             int orderCount = (int)ExecuteScalar(conn, "GetOrderCount", 24, 36); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名称</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary> 
            执行指定数据库事务的命令,返回结果集中的第一行第一列. 
            </summary> 
            <remarks> 
            示例:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount"); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行指定数据库事务的命令,指定参数,返回结果集中的第一行第一列. 
            </summary> 
            <remarks> 
            示例:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary> 
            执行指定数据库事务的命令,指定参数值,返回结果集中的第一行第一列. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值参数. 
            
            示例:  
             int orderCount = (int)ExecuteScalar(trans, "GetOrderCount", 24, 36); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="spName">存储过程名称</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary> 
            执行指定数据库连接对象的SqlCommand命令,并产生一个XmlReader对象做为结果集返回. 
            </summary> 
            <remarks> 
            示例:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders"); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句 using "FOR XML AUTO"</param> 
            <returns>返回XmlReader结果集对象.</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行指定数据库连接对象的SqlCommand命令,并产生一个XmlReader对象做为结果集返回,指定参数. 
            </summary> 
            <remarks> 
            示例:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句 using "FOR XML AUTO"</param> 
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param> 
            <returns>返回XmlReader结果集对象.</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary> 
            执行指定数据库连接对象的SqlCommand命令,并产生一个XmlReader对象做为结果集返回,指定参数值. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值参数. 
            
            示例:  
             XmlReader r = ExecuteXmlReader(conn, "GetOrders", 24, 36); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名称 using "FOR XML AUTO"</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回XmlReader结果集对象.</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary> 
            执行指定数据库事务的SqlCommand命令,并产生一个XmlReader对象做为结果集返回. 
            </summary> 
            <remarks> 
            示例:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders"); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句 using "FOR XML AUTO"</param> 
            <returns>返回XmlReader结果集对象.</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行指定数据库事务的SqlCommand命令,并产生一个XmlReader对象做为结果集返回,指定参数. 
            </summary> 
            <remarks> 
            示例:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句 using "FOR XML AUTO"</param> 
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param> 
            <returns>返回XmlReader结果集对象.</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary> 
            执行指定数据库事务的SqlCommand命令,并产生一个XmlReader对象做为结果集返回,指定参数值. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值参数. 
            
            示例:  
             XmlReader r = ExecuteXmlReader(trans, "GetOrders", 24, 36); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="spName">存储过程名称</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回一个包含结果集的DataSet.</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary> 
            执行指定数据库连接字符串的命令,映射数据表并填充数据集. 
            </summary> 
            <remarks> 
            示例:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <param name="dataSet">要填充结果集的DataSet实例</param> 
            <param name="tableNames">表映射的数据表数组 
            用户定义的表名 (可有是实际的表名.)</param> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行指定数据库连接字符串的命令,映射数据表并填充数据集.指定命令参数. 
            </summary> 
            <remarks> 
            示例:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param> 
            <param name="dataSet">要填充结果集的DataSet实例</param> 
            <param name="tableNames">表映射的数据表数组 
            用户定义的表名 (可有是实际的表名.) 
            </param> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.FillDataset(System.String,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary> 
            执行指定数据库连接字符串的命令,映射数据表并填充数据集,指定存储过程参数值. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值参数. 
            
            示例:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, 24); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataSet">要填充结果集的DataSet实例</param> 
            <param name="tableNames">表映射的数据表数组 
            用户定义的表名 (可有是实际的表名.) 
            </param>    
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary> 
            执行指定数据库连接对象的命令,映射数据表并填充数据集. 
            </summary> 
            <remarks> 
            示例:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <param name="dataSet">要填充结果集的DataSet实例</param> 
            <param name="tableNames">表映射的数据表数组 
            用户定义的表名 (可有是实际的表名.) 
            </param>    
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行指定数据库连接对象的命令,映射数据表并填充数据集,指定参数. 
            </summary> 
            <remarks> 
            示例:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <param name="dataSet">要填充结果集的DataSet实例</param> 
            <param name="tableNames">表映射的数据表数组 
            用户定义的表名 (可有是实际的表名.) 
            </param> 
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary> 
            执行指定数据库连接对象的命令,映射数据表并填充数据集,指定存储过程参数值. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值参数. 
            
            示例:  
             FillDataset(conn, "GetOrders", ds, new string[] {"orders"}, 24, 36); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataSet">要填充结果集的DataSet实例</param> 
            <param name="tableNames">表映射的数据表数组 
            用户定义的表名 (可有是实际的表名.) 
            </param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary> 
            执行指定数据库事务的命令,映射数据表并填充数据集. 
            </summary> 
            <remarks> 
            示例:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <param name="dataSet">要填充结果集的DataSet实例</param> 
            <param name="tableNames">表映射的数据表数组 
            用户定义的表名 (可有是实际的表名.) 
            </param> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行指定数据库事务的命令,映射数据表并填充数据集,指定参数. 
            </summary> 
            <remarks> 
            示例:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <param name="dataSet">要填充结果集的DataSet实例</param> 
            <param name="tableNames">表映射的数据表数组 
            用户定义的表名 (可有是实际的表名.) 
            </param> 
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary> 
            执行指定数据库事务的命令,映射数据表并填充数据集,指定存储过程参数值. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值参数. 
            
            示例:  
             FillDataset(trans, "GetOrders", ds, new string[]{"orders"}, 24, 36); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataSet">要填充结果集的DataSet实例</param> 
            <param name="tableNames">表映射的数据表数组 
            用户定义的表名 (可有是实际的表名.) 
            </param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary> 
            [私有方法][内部调用]执行指定数据库连接对象/事务的命令,映射数据表并填充数据集,DataSet/TableNames/SqlParameters. 
            </summary> 
            <remarks> 
            示例:  
             FillDataset(conn, trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <param name="dataSet">要填充结果集的DataSet实例</param> 
            <param name="tableNames">表映射的数据表数组 
            用户定义的表名 (可有是实际的表名.) 
            </param> 
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.UpdateDataset(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.DataSet,System.String)">
            <summary> 
            执行数据集更新到数据库,指定inserted, updated, or deleted命令. 
            </summary> 
            <remarks> 
            示例:  
             UpdateDataset(conn, insertCommand, deleteCommand, updateCommand, dataSet, "Order"); 
            </remarks> 
            <param name="insertCommand">[追加记录]一个有效的T-SQL语句或存储过程</param> 
            <param name="deleteCommand">[删除记录]一个有效的T-SQL语句或存储过程</param> 
            <param name="updateCommand">[更新记录]一个有效的T-SQL语句或存储过程</param> 
            <param name="dataSet">要更新到数据库的DataSet</param> 
            <param name="tableName">要更新到数据库的DataTable</param> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.CreateCommand(System.Data.SqlClient.SqlConnection,System.String,System.String[])">
            <summary> 
            创建SqlCommand命令,指定数据库连接对象,存储过程名和参数. 
            </summary> 
            <remarks> 
            示例:  
             SqlCommand command = CreateCommand(conn, "AddCustomer", "CustomerID", "CustomerName"); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名称</param> 
            <param name="sourceColumns">源表的列名称数组</param> 
            <returns>返回SqlCommand命令</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteNonQueryTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库连接字符串的存储过程,使用DataRow做为参数值,返回受影响的行数. 
            </summary> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回影响的行数</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库连接对象的存储过程,使用DataRow做为参数值,返回受影响的行数. 
            </summary> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回影响的行数</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库事物的存储过程,使用DataRow做为参数值,返回受影响的行数. 
            </summary> 
            <param name="transaction">一个有效的连接事务 object</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回影响的行数</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteDatasetTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库连接字符串的存储过程,使用DataRow做为参数值,返回DataSet. 
            </summary> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回一个包含结果集的DataSet.</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库连接对象的存储过程,使用DataRow做为参数值,返回DataSet. 
            </summary> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回一个包含结果集的DataSet.</returns> 
            
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库事务的存储过程,使用DataRow做为参数值,返回DataSet. 
            </summary> 
            <param name="transaction">一个有效的连接事务 object</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回一个包含结果集的DataSet.</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteReaderTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库连接字符串的存储过程,使用DataRow做为参数值,返回DataReader. 
            </summary> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回包含结果集的SqlDataReader</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库连接对象的存储过程,使用DataRow做为参数值,返回DataReader. 
            </summary> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回包含结果集的SqlDataReader</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库事物的存储过程,使用DataRow做为参数值,返回DataReader. 
            </summary> 
            <param name="transaction">一个有效的连接事务 object</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回包含结果集的SqlDataReader</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteScalarTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库连接字符串的存储过程,使用DataRow做为参数值,返回结果集中的第一行第一列. 
            </summary> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库连接对象的存储过程,使用DataRow做为参数值,返回结果集中的第一行第一列. 
            </summary> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库事务的存储过程,使用DataRow做为参数值,返回结果集中的第一行第一列. 
            </summary> 
            <param name="transaction">一个有效的连接事务 object</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库连接对象的存储过程,使用DataRow做为参数值,返回XmlReader类型的结果集. 
            </summary> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回XmlReader结果集对象.</returns> 
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库事务的存储过程,使用DataRow做为参数值,返回XmlReader类型的结果集. 
            </summary> 
            <param name="transaction">一个有效的连接事务 object</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回XmlReader结果集对象.</returns> 
        </member>
        <member name="T:XCLNetTools.DataBase.MSSQL.SqlHelper.SqlConnectionOwnership">
            <summary> 
            枚举,标识数据库连接是由SqlHelper提供还是由调用者提供 
            </summary> 
        </member>
        <member name="F:XCLNetTools.DataBase.MSSQL.SqlHelper.SqlConnectionOwnership.Internal">
            <summary>由SqlHelper提供连接</summary> 
        </member>
        <member name="F:XCLNetTools.DataBase.MSSQL.SqlHelper.SqlConnectionOwnership.External">
            <summary>由调用者提供连接</summary> 
        </member>
        <member name="T:XCLNetTools.XML.ConfigClass">
            <summary>
            Web.config 操作类
            </summary>
        </member>
        <member name="F:XCLNetTools.XML.ConfigClass.getConfigFilePath">
            <summary>
            取得置文件路径和名称
            </summary>
        </member>
        <member name="M:XCLNetTools.XML.ConfigClass.GetConfigurationSecion(System.String)">
            <summary>
            返回配置节
            </summary>
            <param name="sectionName">节点名，如【appSettings】</param>
            <returns>该配置节点对象</returns>
        </member>
        <member name="M:XCLNetTools.XML.ConfigClass.GetConfigString(System.String,System.String)">
            <summary>
            取得配置文件中的字符串KEY
            </summary>
            <param name="sectionName">节点名称（为空时，默认为"appSettings"）</param>
            <param name="key">KEY名</param>
            <returns>返回KEY值</returns>
        </member>
        <member name="M:XCLNetTools.XML.ConfigClass.GetConfigString(System.String)">
            <summary>
            取得appSettings中的配置节
            </summary>
            <param name="key">key名</param>
            <returns>value</returns>
        </member>
        <member name="M:XCLNetTools.XML.ConfigClass.GetConfigDecimal(System.String,System.String)">
            <summary>
            得到配置文件中的配置decimal信息
            </summary>
            <param name="sectionName">节点名称</param>
            <param name="key">KEY名称</param>
            <returns>返回浮点数</returns>
        </member>
        <member name="M:XCLNetTools.XML.ConfigClass.GetConfigDecimal(System.String)">
            <summary>
            取得配置文件中 默认节点的 浮点数型
            </summary>
            <param name="key">key名</param>
            <returns>value值</returns>
        </member>
        <member name="M:XCLNetTools.XML.ConfigClass.GetConfigInt(System.String,System.String)">
            <summary>
            得到配置文件中的配置int信息
            </summary>
            <param name="sectionName">节点名称</param>
            <param name="key">KEY名</param>
            <returns>返回整数</returns>
        </member>
        <member name="M:XCLNetTools.XML.ConfigClass.GetConfigInt(System.String)">
            <summary>
            得到配置文件中的默认节点配置int信息
            </summary>
            <param name="key">KEY名</param>
            <returns>返回整数</returns>
        </member>
        <!-- 对于成员“M:XCLNetTools.XML.ConfigClass.SetConfigKeyValue(System.String,System.String,System.String)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:XCLNetTools.XML.ConfigClass.SetConfigKeyValue(System.String,System.String)”忽略有格式错误的 XML 注释 -->
        <member name="M:XCLNetTools.XML.ConfigClass.RemoveSectionKey(System.String,System.String)">
            <summary>
            删除配置文件节点
            </summary>
            <param name="SectionName">节名称</param>
            <param name="key">要删除的键</param>
        </member>
        <member name="M:XCLNetTools.XML.ConfigClass.RemoveSectionKey(System.String)">
            <summary>
            删除默认节点
            </summary>
            <param name="key"></param>
        </member>
        <member name="P:XCLNetTools.XML.ConfigClass.LoadConfigDocument">
            <summary>
            读入配置文件
            </summary>
        </member>
        <member name="T:XCLNetTools.PublicClass.TextValue">
            <summary>
            键值类
            </summary>
        </member>
        <member name="P:XCLNetTools.PublicClass.TextValue.Text">
            <summary>
            键
            </summary>
        </member>
        <member name="P:XCLNetTools.PublicClass.TextValue.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="T:XCLNetTools.Message.Error.ErrorHttpModule">
            <summary>
            异常处理
            </summary>
        </member>
        <member name="M:XCLNetTools.Message.Error.ErrorHttpModule.Init(System.Web.HttpApplication)">
            <summary>
            初始化
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:XCLNetTools.Message.Error.ErrorHttpModule.Application_Error(System.Object,System.EventArgs)">
            <summary>
            错误
            </summary>
        </member>
        <member name="M:XCLNetTools.Message.Error.ErrorHttpModule.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="T:XCLNetTools.EasyUI.Model.Tree.TreeItem">
            <summary>
            tree的每项(注意大小写，此js插件中是小写)
            </summary>
        </member>
        <member name="P:XCLNetTools.EasyUI.Model.Tree.TreeItem.id">
            <summary>
            id
            </summary>
        </member>
        <member name="P:XCLNetTools.EasyUI.Model.Tree.TreeItem.text">
            <summary>
            text
            </summary>
        </member>
        <member name="P:XCLNetTools.EasyUI.Model.Tree.TreeItem.state">
            <summary>
            state
            </summary>
        </member>
        <member name="P:XCLNetTools.EasyUI.Model.Tree.TreeItem.children">
            <summary>
            子项数组
            </summary>
        </member>
        <member name="T:XCLNetTools.Enum.EnumObj">
            <summary>
            枚举操作类
            </summary>
        </member>
        <member name="M:XCLNetTools.Enum.EnumObj.GetList(System.Type)">
            <summary>
            将枚举转为list的形式
            </summary>
            <param name="type">枚举的typeof</param>
            <returns>枚举的list形式</returns>
        </member>
        <member name="M:XCLNetTools.Enum.EnumObj.IsExistEnumValue(System.Int32,System.Type)">
            <summary>
            判断数字是否属于该枚举
            <param name="v">枚举的value，就是数字</param>
            <param name="type">枚举的typeof</param>
            <returns>true:v属于该枚举，反之则不属于</returns>
            </summary>
        </member>
        <member name="M:XCLNetTools.Enum.EnumObj.GetValueByText(System.Collections.Generic.List{XCLNetTools.Enum.EnumObj},System.String)">
            <summary>
            根据名获取值（若未找到，则返回-1）
            </summary>
            <param name="lst">枚举的list形式</param>
            <param name="text">枚举项的名称</param>
            <returns>该枚举的值</returns>
        </member>
        <member name="P:XCLNetTools.Enum.EnumObj.Text">
            <summary>
            文本
            </summary>
        </member>
        <member name="P:XCLNetTools.Enum.EnumObj.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.StringPlus.GetStrArray(System.String,System.Char,System.Boolean)">
            <summary>
            将指定字符串用指定分隔符分开存到list中
            </summary>
            <param name="str">源字符串</param>
            <param name="speater">分隔字符</param>
            <param name="toLower">true:转为小写</param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.StringHander.StringPlus.GetStrArray(System.String)">
            <summary>
            将字符串用,分隔
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.StringPlus.GetArrayStr(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            将list转为用指定分隔符拼接的字符串
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.StringPlus.DelLastComma(System.String)">
            <summary>
            删除最后结尾的一个逗号
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.StringPlus.DelLastChar(System.String,System.String)">
            <summary>
            删除最后结尾的指定字符后的字符
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.StringPlus.ToSBC(System.String)">
            <summary>
            转全角的函数(SBC case)
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.StringPlus.ToDBC(System.String)">
            <summary>
             转半角的函数(SBC case)
            </summary>
        </member>
        <member name="T:XCLNetTools.StringHander.DEncrypt">
            <summary>
            Encrypt 的摘要说明。
            Copyright (C) Maticsoft
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.DEncrypt.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.DEncrypt.Encrypt(System.String)">
            <summary>
            使用缺省密钥字符串加密string
            </summary>
            <param name="original">明文</param>
            <returns>密文</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.DEncrypt.Decrypt(System.String)">
            <summary>
            使用缺省密钥字符串解密string
            </summary>
            <param name="original">密文</param>
            <returns>明文</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.DEncrypt.Encrypt(System.String,System.String)">
            <summary>
            使用给定密钥字符串加密string
            </summary>
            <param name="original">原始文字</param>
            <param name="key">密钥</param>
            <param name="encoding">字符编码方案</param>
            <returns>密文</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.DEncrypt.Decrypt(System.String,System.String)">
            <summary>
            使用给定密钥字符串解密string
            </summary>
            <param name="original">密文</param>
            <param name="key">密钥</param>
            <returns>明文</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.DEncrypt.Decrypt(System.String,System.String,System.Text.Encoding)">
            <summary>
            使用给定密钥字符串解密string,返回指定编码方式明文
            </summary>
            <param name="encrypted">密文</param>
            <param name="key">密钥</param>
            <param name="encoding">字符编码方案</param>
            <returns>明文</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.DEncrypt.Decrypt(System.Byte[])">
            <summary>
            使用缺省密钥字符串解密byte[]
            </summary>
            <param name="encrypted">密文</param>
            <param name="key">密钥</param>
            <returns>明文</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.DEncrypt.Encrypt(System.Byte[])">
            <summary>
            使用缺省密钥字符串加密
            </summary>
            <param name="original">原始数据</param>
            <param name="key">密钥</param>
            <returns>密文</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.DEncrypt.MakeMD5(System.Byte[])">
            <summary>
            生成MD5摘要
            </summary>
            <param name="original">数据源</param>
            <returns>摘要</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.DEncrypt.Encrypt(System.Byte[],System.Byte[])">
            <summary>
            使用给定密钥加密
            </summary>
            <param name="original">明文</param>
            <param name="key">密钥</param>
            <returns>密文</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.DEncrypt.Decrypt(System.Byte[],System.Byte[])">
            <summary>
            使用给定密钥解密数据
            </summary>
            <param name="encrypted">密文</param>
            <param name="key">密钥</param>
            <returns>明文</returns>
        </member>
        <member name="T:XCLNetTools.StringHander.DateHelper">
            <summary>
            DateHelper
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.DateHelper.DaysLeftInMonth(System.DateTime)">
            <summary>
            返回指定日期到该日期所在月结束的剩余天数
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.DateHelper.DaysLeftInYear(System.DateTime)">
            <summary>
            返回指定日期到该日期所在年结束的剩余天数
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.DateHelper.DaysLeftInWeek(System.DateTime)">
            <summary>
            返回指定日期到所在周结束的剩余天数
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.DateHelper.FromUnixTime(System.Int32)">
            <summary>
            将Unix（int）转为DateTime
            </summary>
            <param name="Date">Unix</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.DateHelper.FromUnixTime(System.Int64)">
            <summary>
             将Unix（long）转为DateTime
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.DateHelper.ToUnix(System.DateTime)">
            <summary>
            将DateTime转为Unix
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.DateHelper.GetTimeString(System.DateTime,System.DateTime)">
            <summary>
            获取两个时间的时间间隔，如：“小时:分钟:秒”
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.StringHander.DateHelper.GetTimeInterval(System.String,System.String)">
            <summary>
            计算日期间隔
            </summary>
            <param name="d1">要参与计算的其中一个日期字符串</param>
            <param name="d2">要参与计算的另一个日期字符串</param>
            <returns>一个表示日期间隔的TimeSpan类型</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.DateHelper.GetTimeInterval(System.DateTime,System.DateTime)">
            <summary>
            计算日期间隔
            </summary>
            <param name="d1">要参与计算的其中一个日期</param>
            <param name="d2">要参与计算的另一个日期</param>
            <returns>一个表示日期间隔的TimeSpan类型</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.DateHelper.GetTimeInterval(System.String,System.String,XCLNetTools.StringHander.DateHelper.diffResultFormat)">
            <summary>
            计算日期间隔
            </summary>
            <param name="d1">要参与计算的其中一个日期字符串</param>
            <param name="d2">要参与计算的另一个日期字符串</param>
            <param name="drf">决定返回值形式的枚举</param>
            <returns>一个代表年月日的int数组，具体数组长度与枚举参数drf有关</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.DateHelper.GetTimeInterval(System.DateTime,System.DateTime,XCLNetTools.StringHander.DateHelper.diffResultFormat)">
            <summary>
            计算日期间隔
            </summary>
            <param name="d1">要参与计算的其中一个日期</param>
            <param name="d2">要参与计算的另一个日期</param>
            <param name="drf">决定返回值形式的枚举</param>
            <returns>一个代表年月日的int数组，具体数组长度与枚举参数drf有关</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.DateHelper.FirstDayOfMonth(System.DateTime)">
            <summary>
            返回指定日期所在月的第一天
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.DateHelper.LastDayOfMonth(System.DateTime)">
            <summary>
            返回指定日期所在月的最后一天(包含时间部分)（如：2012-01-02 23:59:59）
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.StringHander.DateHelper.GetStartTimeEndTimeByYearMonth(System.String,System.Int32)">
            <summary>
            根据指定年月和向前推移的月数，返回起始时间
            如：传入("2012-09",2)，则返回{2012-08-01,2012-09-01}
            </summary>
            <param name="yearMonth">如：2012-09</param>
            <param name="monthCount">如：2</param>
            <returns>如：{2012-08-01,2012-09-01}</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.DateHelper.GetDateTimeWhereByStartEndTime(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            返回指定条件名和起止时间的最终条件字符串（包含等号）
            如：("aaa",'2012-01-01 00:10:00',null)="aaa>='2012-01-01 00:10:00'"(无小于等于，若end不为null，则有小于等于)
            </summary>
            <param name="fieldName">条件名</param>
            <param name="start">开始时间</param>
            <param name="end">结束时间</param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.StringHander.DateHelper.ToCNString(System.DateTime)">
            <summary>
            将数字日期格式转为中文日期格式
            如：2013-01-01=》二〇一三年一月一日
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="T:XCLNetTools.StringHander.DateHelper.diffResultFormat">
            <summary>
            关于返回值形式的枚举
            </summary>
        </member>
        <member name="F:XCLNetTools.StringHander.DateHelper.diffResultFormat.yymm">
            <summary>
            年数和月数
            </summary>
        </member>
        <member name="F:XCLNetTools.StringHander.DateHelper.diffResultFormat.yy">
            <summary>
            年数
            </summary>
        </member>
        <member name="F:XCLNetTools.StringHander.DateHelper.diffResultFormat.mm">
            <summary>
            月数
            </summary>
        </member>
        <member name="F:XCLNetTools.StringHander.DateHelper.diffResultFormat.dd">
            <summary>
            天数
            </summary>
        </member>
        <member name="T:XCLNetTools.StringHander.DateHelper.Weeks">
            <summary>
            周枚举
            </summary>
        </member>
        <member name="T:XCLNetTools.FileHandler.INIFile">
            <summary>
            INI文件读写类。
            </summary>
        </member>
        <member name="M:XCLNetTools.FileHandler.INIFile.IniWriteValue(System.String,System.String,System.String)">
            <summary>
            写INI文件
            </summary>
            <param name="Section"></param>
            <param name="Key"></param>
            <param name="Value"></param>
        </member>
        <member name="M:XCLNetTools.FileHandler.INIFile.IniReadValue(System.String,System.String)">
            <summary>
            读取INI文件
            </summary>
            <param name="Section"></param>
            <param name="Key"></param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.FileHandler.INIFile.ClearAllSection">
            <summary>
            删除ini文件下所有段落
            </summary>
        </member>
        <member name="M:XCLNetTools.FileHandler.INIFile.ClearSection(System.String)">
            <summary>
            删除ini文件下personal段落下的所有键
            </summary>
            <param name="Section"></param>
        </member>
        <member name="T:XCLNetTools.FileHandler.FileDirectory">
            <summary>
            文件目录操作类
            </summary>
        </member>
        <member name="M:XCLNetTools.FileHandler.FileDirectory.DirectoryExists(System.String)">
            <summary>
            判断目录是否存在
            </summary>
            <param name="DirectoryName">目录路径</param>
            <returns>true：存在，false：不存在</returns>
        </member>
        <member name="M:XCLNetTools.FileHandler.FileDirectory.MakeDirectory(System.String)">
            <summary>
            建立目录
            </summary>
            <param name="DirectoryName">目录名</param>
            <returns>返回boolean,true:目录建立成功, false:目录建立失败</returns>
        </member>
        <member name="M:XCLNetTools.FileHandler.FileDirectory.RMDIR(System.String)">
            <summary>
            删除指定的目录
            </summary>
            <param name="DirectoryName">目录名</param>
            <returns>true：删除成功，false：删除失败</returns>
        </member>
        <member name="M:XCLNetTools.FileHandler.FileDirectory.DelTree(System.String)">
            <summary>
            删除目录并删除其下的子目录及其文件
            </summary>
            <param name="DirectoryName">目录名</param>
            <returns>true:删除成功,false:删除失败</returns>
        </member>
        <member name="M:XCLNetTools.FileHandler.FileDirectory.ClearDirectory(System.String)">
            <summary>
            清空指定目录
            </summary>
        </member>
        <member name="M:XCLNetTools.FileHandler.FileDirectory.CreateTextFile(System.String)">
            <summary>
            建立一个文件
            </summary>
            <param name="FilePathName">目录名</param>
            <returns>true:建立成功,false:建立失败</returns>
        </member>
        <member name="M:XCLNetTools.FileHandler.FileDirectory.AppendText(System.String,System.String)">
            <summary> 
            在文件里追加内容 
            </summary> 
            <param name="FilePathName">文件名</param> 
            <param name="WriteWord">追加内容</param>
        </member>
        <member name="M:XCLNetTools.FileHandler.FileDirectory.AppendText(System.String,System.String,System.Text.Encoding)">
            <summary> 
            在文件里追加内容 
            </summary> 
            <param name="FilePathName">文件名</param> 
            <param name="WriteWord">追加内容</param>
        </member>
        <member name="M:XCLNetTools.FileHandler.FileDirectory.ReadFileData(System.String)">
            <summary> 
            读取文件里内容 
            </summary> 
            <param name="FilePathName">文件名</param>
            <returns>文件内容</returns>
        </member>
        <member name="M:XCLNetTools.FileHandler.FileDirectory.FileDelete(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="AbsoluteFilePath">文件绝对地址</param>
            <returns>true:删除文件成功,false:删除文件失败</returns>
        </member>
        <member name="M:XCLNetTools.Enum.EnumHelper.GetEnumFieldModelList(System.Type)">
            <summary>
            将枚举转为List(包含自定义属性description)
            </summary>
        </member>
        <member name="M:XCLNetTools.Enum.EnumHelper.GetEnumDesc``1(``0)">
            <summary>
            获取枚举的description注解
            </summary>
        </member>
        <member name="T:XCLNetTools.PublicClass.KeyValue">
            <summary>
            键值类
            </summary>
        </member>
        <member name="P:XCLNetTools.PublicClass.KeyValue.Key">
            <summary>
            键
            </summary>
        </member>
        <member name="P:XCLNetTools.PublicClass.KeyValue.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="T:XCLNetTools.FileHandler.ZipHelper">
            <summary>
            文件的压缩与解压缩
            </summary>
        </member>
        <member name="M:XCLNetTools.FileHandler.ZipHelper.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:XCLNetTools.FileHandler.ZipHelper.ToZipFile(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            压缩单个文件
            </summary>
            <param name="fileToZip">要压缩的文件</param>
            <param name="zipedFile">压缩后的文件</param>
            <param name="compressionLevel">压缩等级</param>
            <param name="blockSize">每次写入大小</param>
        </member>
        <member name="M:XCLNetTools.FileHandler.ZipHelper.ToZipFile(System.String,System.String)">
            <summary>
            压缩单个文件
            </summary>
            <param name="fileToZip">要进行压缩的文件名</param>
            <param name="zipedFile">压缩后生成的压缩文件名</param>
        </member>
        <member name="M:XCLNetTools.FileHandler.ZipHelper.ZipFileDirectory(System.String,System.String)">
            <summary>
            压缩多层目录
            </summary>
            <param name="strDirectory">The directory.</param>
            <param name="zipedFile">The ziped file.</param>
        </member>
        <member name="M:XCLNetTools.FileHandler.ZipHelper.ZipSetp(System.String,ICSharpCode.SharpZipLib.Zip.ZipOutputStream,System.String)">
            <summary>
            递归遍历目录
            </summary>
            <param name="strDirectory">The directory.</param>
            <param name="s">The ZipOutputStream Object.</param>
            <param name="parentPath">The parent path.</param>
        </member>
        <member name="M:XCLNetTools.FileHandler.ZipHelper.UnZip(System.String,System.String,System.String,System.Boolean)">
            <summary>
            解压缩一个 zip 文件。
            </summary>
            <param name="zipedFile">The ziped file.</param>
            <param name="strDirectory">The STR directory.</param>
            <param name="password">zip 文件的密码。</param>
            <param name="overWrite">是否覆盖已存在的文件。</param>
        </member>
        <member name="M:XCLNetTools.FileHandler.ZipHelper.CompressFile(System.String[],System.String,System.String[])">
            <summary>
            压缩多个文件
            </summary>
            <param name="files">要压缩的文件物理路径数组</param>
            <param name="zipedFile">创建的zip文件路径</param>
            <param name="fileNames">自定义待压缩的文件名</param>
        </member>
        <member name="T:XCLNetTools.Enum.CommonEnum">
            <summary>
            常用枚举常量
            </summary>
        </member>
        <member name="T:XCLNetTools.DataHandler.OutPutClass">
            <summary>
            导出字段实体类
            （主要是便于在所有导出信息字段类中查询到要导出的记录的字段对应信息）
            </summary>
        </member>
        <member name="P:XCLNetTools.DataHandler.OutPutClass.tableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:XCLNetTools.DataHandler.OutPutClass.fields">
            <summary>
            字段列表
            </summary>
        </member>
        <member name="T:XCLNetTools.Control.Pagination.PaginationBase">
            <summary>
            分页基类
            </summary>
        </member>
        <member name="M:XCLNetTools.Control.Pagination.PaginationBase.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:XCLNetTools.Control.Pagination.PaginationBase.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="recordCount">记录总数</param>
            <param name="pageSize">每页最多显示的数量</param>
            <param name="pageIndex">当前为第几页</param>
        </member>
        <member name="P:XCLNetTools.Control.Pagination.PaginationBase.RecordCount">
            <summary>
            记录总数
            </summary>
        </member>
        <member name="P:XCLNetTools.Control.Pagination.PaginationBase.PageSize">
            <summary>
            每页最多显示的数量
            </summary>
        </member>
        <member name="P:XCLNetTools.Control.Pagination.PaginationBase.PageIndex">
            <summary>
            当前为第几页
            </summary>
        </member>
        <member name="T:XCLNetTools.Control.Control">
            <summary>
            服务器控件操作相关
            </summary>
        </member>
        <member name="M:XCLNetTools.Control.Control.RepDataBind``1(System.Web.UI.WebControls.Repeater,System.Collections.Generic.List{``0},System.Boolean,System.String[])">
            <summary>
            Repeater绑定数据
            </summary>
            <param name="rep">Repeater控件</param>
            <param name="dataSource">数据源</param>
            <param name="isShowNoDataMsg">true:没有数据时，显示“暂无数据”</param>
            <param name="noDataMsg">没有数据时非默认提示</param>
        </member>
        <member name="M:XCLNetTools.Control.Control.RepDataBind(System.Web.UI.WebControls.Repeater,System.Data.DataTable,System.Boolean,System.String[])">
            <summary>
            Repeater绑定数据
            </summary>
            <param name="rep">Repeater控件</param>
            <param name="dataSource">数据源</param>
            <param name="isShowNoDataMsg">true:没有数据时，显示“暂无数据”</param>
            <param name="noDataMsg">没有数据时非默认提示</param>
        </member>
        <member name="M:XCLNetTools.Control.Control.BindDDL(System.Web.UI.WebControls.DropDownList,System.Data.DataSet,System.String,System.String,System.String,System.Boolean)">
            <summary>
            绑定DDL，value为初始选中值
            </summary>
            <param name="ddl">DropDownList</param>
            <param name="ds">dataset</param>
            <param name="textField">文本字段</param>
            <param name="valueField">值字段</param>
            <param name="value">默认选中项的值</param>
            <param name="flag">true:有"--全部--" false:无</param>
        </member>
        <member name="M:XCLNetTools.Control.Control.BindCheckBoxList(System.Web.UI.WebControls.CheckBoxList,System.Data.DataSet,System.String,System.String,System.String)">
            <summary>
            绑定CheckBoxList，value为初始选中值
            </summary>
            <param name="ck">CheckBoxList</param>
            <param name="ds">dataset</param>
            <param name="textField">文本字段</param>
            <param name="valueField">值字段</param>
            <param name="value">以,隔开的字符串，默认选中值</param>
        </member>
        <member name="M:XCLNetTools.Control.Control.BindEnum(System.Web.UI.WebControls.WebControl,System.Collections.Generic.List{XCLNetTools.Enum.EnumObj},System.String)">
            <summary>
            绑定枚举（此方法已过期，请使用BindLst）
            </summary>
            <param name="c">控件</param>
            <param name="lst">EnumObj list</param>
            <param name="defaultValue">默认选中值</param>
        </member>
        <member name="M:XCLNetTools.Control.Control.BindLst``1(System.Web.UI.WebControls.WebControl,System.Collections.Generic.List{``0},System.String,System.String,System.String,System.Boolean)">
            <summary>
            将list绑定到控件上
            </summary>
        </member>
        <member name="T:XCLNetTools.Cache.CacheClass">
            <summary>
            缓存相关的操作类
            </summary>
        </member>
        <member name="M:XCLNetTools.Cache.CacheClass.GetCache(System.String)">
            <summary>
            获取当前应用程序指定CacheKey的Cache值
            </summary>
            <param name="CacheKey">缓存key名</param>
            <returns>该缓存的值</returns>
        </member>
        <member name="M:XCLNetTools.Cache.CacheClass.SetCache(System.String,System.Object)">
            <summary>
            设置当前应用程序指定CacheKey的Cache值
            </summary>
            <param name="CacheKey">缓存key名</param>
            <param name="objObject">缓存key值</param>
        </member>
        <member name="M:XCLNetTools.Cache.CacheClass.SetCache(System.String,System.Object,System.DateTime,System.TimeSpan)">
            <summary>
            设置当前应用程序指定CacheKey的Cache值
            </summary>
            <param name="CacheKey">缓存key名</param>
            <param name="objObject">缓存key值</param>
            <param name="absoluteExpiration">所插入对象将到期并被从缓存中移除的时间</param>
            <param name="slidingExpiration">最后一次访问所插入对象时与该对象到期时之间的时间间隔</param>
        </member>
        <member name="M:XCLNetTools.Cache.CacheClass.Clear(System.String)">
            <summary>
            删除指定缓存
            </summary>
            <param name="key">缓存key名</param>
        </member>
        <member name="M:XCLNetTools.Cache.CacheClass.Exists(System.String)">
            <summary>
            指定缓存是否存在
            </summary>
            <param name="key">缓存名</param>
            <returns>true:存在</returns>
        </member>
        <member name="M:XCLNetTools.Cache.CacheClass.RemoveAllCache">
            <summary>
            移除全部缓存
            </summary>
        </member>
        <member name="T:XCLNetTools.Javascript.Jscript">
            <summary>
             一些常用的Js调用
             </summary>
        </member>
        <member name="M:XCLNetTools.Javascript.Jscript.WriteJS(System.String)">
            <summary>
            输出JS代码
            </summary>
            <param name="js"></param>
        </member>
        <member name="M:XCLNetTools.Javascript.Jscript.Alert(System.String)">
            <summary>
            弹出Javascript小窗口
            </summary>
            <param name="js">窗口信息</param>
        </member>
        <member name="M:XCLNetTools.Javascript.Jscript.AlertAndRedirect(System.String,System.String)">
            <summary>
            弹出消息框并且转向到新的URL
            </summary>
            <param name="message">消息内容</param>
            <param name="toURL">连接地址</param>
        </member>
        <member name="M:XCLNetTools.Javascript.Jscript.GoHistory(System.Int32)">
            <summary>
            回到历史页面
            </summary>
            <param name="value">-1/1</param>
        </member>
        <member name="M:XCLNetTools.Javascript.Jscript.CloseWindow">
            <summary>
            关闭当前窗口
            </summary>
        </member>
        <member name="M:XCLNetTools.Javascript.Jscript.RefreshParent(System.String)">
            <summary>
            刷新父窗口
            </summary>
        </member>
        <member name="M:XCLNetTools.Javascript.Jscript.RefreshOpener">
            <summary>
            刷新打开窗口
            </summary>
        </member>
        <member name="M:XCLNetTools.Javascript.Jscript.OpenWebFormSize(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            打开指定大小的新窗体
            </summary>
            <param name="url">地址</param>
            <param name="width">宽</param>
            <param name="heigth">高</param>
            <param name="top">头位置</param>
            <param name="left">左位置</param>
        </member>
        <member name="M:XCLNetTools.Javascript.Jscript.OpenWebFormSize(System.String)">
            <summary>
            打开指定大小的新窗体
            </summary>
            <param name="url">地址</param>
            <param name="width">宽</param>
            <param name="heigth">高</param>
            <param name="top">头位置</param>
            <param name="left">左位置</param>
        </member>
        <member name="M:XCLNetTools.Javascript.Jscript.JavascriptLocationHref(System.String)">
            <summary>
            转向Url制定的页面
            </summary>
            <param name="url">连接地址</param>
        </member>
        <member name="M:XCLNetTools.Javascript.Jscript.ShowModalDialogWindow(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            打开指定大小位置的模式对话框
            </summary>
            <param name="webFormUrl">连接地址</param>
            <param name="width">宽</param>
            <param name="height">高</param>
            <param name="top">距离上位置</param>
            <param name="left">距离左位置</param>
        </member>
        <member name="M:XCLNetTools.Javascript.Jscript.ShowModalDialogWindow(System.String,System.String)">
            <summary>
            打开指定大小位置的模式对话框
            </summary>
            <param name="webFormUrl"></param>
            <param name="features"></param>
        </member>
        <member name="M:XCLNetTools.Javascript.Jscript.ShowModalDialogJavascript(System.String,System.String)">
            <summary>
            打开指定大小位置的模式对话框
            </summary>
            <param name="webFormUrl">连接地址</param>
            <param name="features">用来描述对话框的外观等信息，可以使用以下的一个或几个，用分号“;”隔开
            1.   dialogHeight:   对话框高度，不小于100px
            2.   dialogWidth:   对话框宽度。
            3.   dialogLeft:    离屏幕左的距离。
            4.   dialogTop:    离屏幕上的距离。
            5.   center:         { yes | no | 1 | 0 } ：             是否居中，默认yes，但仍可以指定高度和宽度。
            6.   help:            {yes | no | 1 | 0 }：               是否显示帮助按钮，默认yes。
            7.   resizable:      {yes | no | 1 | 0 } [IE5+]：    是否可被改变大小。默认no。
            8.   status:         {yes | no | 1 | 0 } [IE5+]：     是否显示状态栏。默认为yes[ Modeless]或no[Modal]。
            9.   scroll:           { yes | no | 1 | 0 | on | off }：是否显示滚动条。默认为yes。
               下面几个属性是用在HTA中的，在一般的网页中一般不使用。
            10.  dialogHide:{ yes | no | 1 | 0 | on | off }：在打印或者打印预览时对话框是否隐藏。默认为no。
            11.   edge:{ sunken | raised }：指明对话框的边框样式。默认为raised。
            12.   unadorned:{ yes | no | 1 | 0 | on | off }：默认为no。
            </param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.Javascript.Jscript.AddBodyEnd(System.Web.UI.Page,System.String)">
            <summary>
            在body结尾输出js(嵌入到ASP.NET页面的底部,恰好位于关闭元素 /form的前面)
            </summary>
        </member>
        <member name="M:XCLNetTools.Javascript.Jscript.AddBodyStart(System.Web.UI.Page,System.String)">
            <summary>
            在body开始处输出js(将 JavaScript 嵌入到页面中开始元素 form 的紧后面)
            </summary>
        </member>
        <member name="M:XCLNetTools.Javascript.Jscript.ShowConfirm(System.Web.UI.WebControls.WebControl,System.String)">
            <summary>
            控件点击 消息确认提示框
            </summary>
            <param name="page">当前页面指针，一般为this</param>
            <param name="msg">提示信息</param>
        </member>
        <member name="M:XCLNetTools.Javascript.Jscript.ShowAndRedirect(System.Web.UI.Page,System.String,System.String)">
            <summary>
            显示消息提示对话框，并进行页面跳转
            </summary>
            <param name="page">当前页面指针，一般为this</param>
            <param name="msg">提示信息</param>
            <param name="url">跳转的目标URL</param>
        </member>
        <member name="T:XCLNetTools.Generic.ListHelper`1">
            <summary>
            List操作类
            </summary>
        </member>
        <member name="M:XCLNetTools.Generic.ListHelper`1.SplitListByStep(System.Int32,System.Collections.Generic.List{`0})">
            <summary>
            根据步长，将一个总List拆分为多个子List
            </summary>
            <param name="step">每个子list最多的项数</param>
            <param name="lst">主list</param>
        </member>
        <member name="M:XCLNetTools.Generic.ListHelper`1.GetStringByList(System.Collections.Generic.List{`0},System.String)">
            <summary>
            将list中的项拼接字符串
            </summary>
            <param name="lst">要操作的list</param>
            <param name="splitChar">分隔符</param>
        </member>
        <member name="M:XCLNetTools.Generic.ListHelper`1.ToDataTable(System.Collections.Generic.IList{`0})">
            <summary>
            将List转换成DataTable
            </summary>
        </member>
        <member name="T:XCLNetTools.DataHandler.DataToExcel">
            <summary>
            操作EXCEL导出数据报表的类
            </summary>
        </member>
        <member name="M:XCLNetTools.DataHandler.DataToExcel.#ctor">
            <summary>
            数据导出至excel类
            </summary>
        </member>
        <member name="M:XCLNetTools.DataHandler.DataToExcel.OutPutExcel(System.String[],System.Collections.Generic.List{XCLNetTools.DataHandler.OutPutClass},System.Data.DataSet,System.String,System.String[])">
            <summary>
            数据导出excel
            </summary>
            <param name="tableName">【表名】（主要是便于在字段信息xml的list中查找到当前导出的信息字段对应关系）</param>
            <param name="outPutClass">导出字段对应关系list</param>
            <param name="ds">数据源</param>
            <param name="fileTitle">文件名</param>
            <param name="conTitle">文件内容第一行的名称</param>
        </member>
        <member name="M:XCLNetTools.DataHandler.DataToExcel.OutPutExcel(XCLNetTools.DataHandler.OutPutParamClass)">
            <summary>
            数据导出excel
            <param name="paramClass">导出参数</param>
            </summary>
        </member>
        <member name="T:XCLNetTools.DataBase.Redis.RedisHelper">
            <summary>
            Redis帮助类
            </summary>
        </member>
        <member name="T:XCLNetTools.DataBase.Access.AccessHelper">
            <summary>
            Access数据库操作类
            </summary>
        </member>
        <member name="M:XCLNetTools.DataBase.Access.AccessHelper.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:XCLNetTools.DataBase.Access.AccessHelper.OpenConnection">
            <summary>
            打开数据库
            </summary>
        </member>
        <member name="M:XCLNetTools.DataBase.Access.AccessHelper.CloseConnection">
            <summary>
            关闭数据库
            </summary>
        </member>
        <member name="M:XCLNetTools.DataBase.Access.AccessHelper.ExcuteSql(System.String)">
            <summary>
            执行sql语句
            </summary>
            <param name="sqlstr"></param>
        </member>
        <member name="M:XCLNetTools.DataBase.Access.AccessHelper.DataReader(System.String)">
            <summary>
            返回指定sql语句的OleDbDataReader对象，使用时请注意关闭这个对象。
            </summary>
            <param name="sqlstr"></param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.DataBase.Access.AccessHelper.DataReader(System.String,System.Data.OleDb.OleDbDataReader@)">
            <summary>
            返回指定sql语句的OleDbDataReader对象,使用时请注意关闭
            </summary>
            <param name="sqlstr"></param>
            <param name="dr"></param>
        </member>
        <member name="M:XCLNetTools.DataBase.Access.AccessHelper.DataSet(System.String)">
            <summary>
            返回指定sql语句的dataset
            </summary>
            <param name="sqlstr"></param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.DataBase.Access.AccessHelper.DataSet(System.String,System.Data.DataSet@)">
            <summary>
            返回指定sql语句的dataset
            </summary>
            <param name="sqlstr"></param>
            <param name="ds"></param>
        </member>
        <member name="M:XCLNetTools.DataBase.Access.AccessHelper.DataTable(System.String)">
            <summary>
            返回指定sql语句的datatable
            </summary>
            <param name="sqlstr"></param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.DataBase.Access.AccessHelper.DataTable(System.String,System.Data.DataTable@)">
            <summary>
            返回指定sql语句的datatable
            </summary>
            <param name="sqlstr"></param>
            <param name="dt"></param>
        </member>
        <member name="M:XCLNetTools.DataBase.Access.AccessHelper.DataView(System.String)">
            <summary>
            返回指定sql语句的dataview
            </summary>
            <param name="sqlstr"></param>
            <returns></returns>
        </member>
        <member name="T:XCLNetTools.DataHandler.OutPutField">
            <summary>
            要导出的字段类
            </summary>
        </member>
        <member name="P:XCLNetTools.DataHandler.OutPutField.oldName">
            <summary>
            该字段的原始名
            </summary>
        </member>
        <member name="P:XCLNetTools.DataHandler.OutPutField.newName">
            <summary>
            导出后，该字段在EXCEL中的显示名
            </summary>
        </member>
        <member name="T:XCLNetTools.DataHandler.ExcelHelper">
            <summary>
            旧版的excel操作（基于excel.dll），建议不要使用此类（用aspose.cells）
            </summary>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.#ctor(System.String,System.String)">
            <summary>
            构造函数，将一个已有Excel工作簿作为模板，并指定输出路径
            </summary>
            <param name="templetFilePath">Excel模板文件路径</param>
            <param name="outputFilePath">输出Excel文件路径</param>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.#ctor(System.String)">
            <summary>
            构造函数，打开一个已有的工作簿
            </summary>
            <param name="fileName">Excel文件名</param>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.#ctor">
            <summary>
            构造函数，新建一个工作簿
            </summary>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.DataTableToExcel(System.Data.DataTable,System.Int32,System.Int32,System.Int32)">
            <summary>
            将DataTable数据写入Excel文件（自动分页）
            </summary>
            <param name="dt">DataTable</param>
            <param name="rows">每个WorkSheet写入多少行数据</param>
            <param name="top">表格数据起始行索引</param>
            <param name="left">表格数据起始列索引</param>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.DataTableToExcel(System.Data.DataTable,System.Int32,System.Int32)">
            <summary>
            将DataTable数据写入Excel文件（不分页）
            </summary>
            <param name="dt">DataTable</param>
            <param name="top">表格数据起始行索引</param>
            <param name="left">表格数据起始列索引</param>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.DataTableToExcel(System.Data.DataTable,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            将DataTable数据写入Excel文件（自动分页，并指定要合并的列索引）
            </summary>
            <param name="dt">DataTable</param>
            <param name="rows">每个WorkSheet写入多少行数据</param>
            <param name="top">表格数据起始行索引</param>
            <param name="left">表格数据起始列索引</param>
            <param name="mergeColumnIndex">DataTable中要合并相同行的列索引，从0开始</param>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.ArrayToExcel(System.String[0:,0:],System.Int32,System.Int32,System.Int32)">
            <summary>
            将二维数组数据写入Excel文件（自动分页）
            </summary>
            <param name="arr">二维数组</param>
            <param name="rows">每个WorkSheet写入多少行数据</param>
            <param name="top">行索引</param>
            <param name="left">列索引</param>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.ArrayToExcel(System.String[0:,0:],System.Int32,System.Int32)">
            <summary>
            将二维数组数据写入Excel文件（不分页）
            </summary>
            <param name="arr">二维数组</param>
            <param name="top">行索引</param>
            <param name="left">列索引</param>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.ArrayToExcel(System.String[0:,0:],System.Int32,System.Int32,System.Boolean)">
            <summary>
            将二维数组数据写入Excel文件（不分页）
            </summary>
            <param name="arr">二维数组</param>
            <param name="top">行索引</param>
            <param name="left">列索引</param>
            <param name="isFormula">填充的数据是否需要计算</param>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.ArrayToExcel(System.String[0:,0:],System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            将二维数组数据写入Excel文件（不分页），合并指定列的相同行
            </summary>
            <param name="arr">二维数组</param>
            <param name="top">行索引</param>
            <param name="left">列索引</param>
            <param name="isFormula">填充的数据是否需要计算</param>
            <param name="mergeColumnIndex">需要合并行的列索引</param>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.ArrayToExcel(System.Int32,System.String[0:,0:],System.Int32,System.Int32)">
            <summary>
            将二维数组数据写入Excel文件（不分页）
            </summary>
            <param name="sheetIndex">工作表索引</param>
            <param name="arr">二维数组</param>
            <param name="top">行索引</param>
            <param name="left">列索引</param>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.ArrayToExcel(System.String[0:,0:],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            将二维数组数据写入Excel文件（自动分页，并指定要合并的列索引）
            </summary>
            <param name="arr">二维数组</param>
            <param name="rows">每个WorkSheet写入多少行数据</param>
            <param name="top">行索引</param>
            <param name="left">列索引</param>
            <param name="mergeColumnIndex">数组的二维索引，相当于DataTable的列索引，索引从0开始</param>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.ChangeCurrentWorkSheet(System.Int32)">
            <summary>
            改变当前工作表
            </summary>
            <param name="sheetIndex">工作表索引</param>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.HiddenWorkSheet(System.String)">
            <summary>
            隐藏指定名称的工作表
            </summary>
            <param name="sheetName">工作表名称</param>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.HiddenWorkSheet(System.Int32)">
            <summary>
            隐藏指定索引的工作表
            </summary>
            <param name="sheetIndex"></param>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.CopyWorkSheets(System.String,System.Int32)">
            <summary>
            在指定名称的工作表后面拷贝指定个数的该工作表的副本，并重命名
            </summary>
            <param name="sheetName">工作表名称</param>
            <param name="sheetCount">工作表个数</param>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.CopyWorkSheet(System.Int32,System.Int32,System.String)">
            <summary>
            将一个工作表拷贝到另一个工作表后面，并重命名
            </summary>
            <param name="srcSheetIndex">拷贝源工作表索引</param>
            <param name="aimSheetIndex">参照位置工作表索引，新工作表拷贝在该工作表后面</param>
            <param name="newSheetName"></param>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.DeleteWorkSheet(System.String)">
            <summary>
            根据名称删除工作表
            </summary>
            <param name="sheetName"></param>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.DeleteWorkSheet(System.Int32)">
            <summary>
            根据索引删除工作表
            </summary>
            <param name="sheetIndex"></param>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.SetTextBox(System.String,System.String)">
            <summary>
            向指定文本框写入数据，对每个WorkSheet操作
            </summary>
            <param name="textboxName">文本框名称</param>
            <param name="text">要写入的文本</param>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.SetTextBox(System.Int32,System.String,System.String)">
            <summary>
            向指定文本框写入数据，对指定WorkSheet操作
            </summary>
            <param name="sheetIndex">工作表索引</param>
            <param name="textboxName">文本框名称</param>
            <param name="text">要写入的文本</param>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.SetTextBoxes(System.Collections.Hashtable)">
            <summary>
            向文本框写入数据，对每个WorkSheet操作
            </summary>
            <param name="ht">Hashtable的键值对保存文本框的ID和数据</param>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.SetTextBoxes(System.Int32,System.Collections.Hashtable)">
            <summary>
            向文本框写入数据，对指定WorkSheet操作
            </summary>
            <param name="ht">Hashtable的键值对保存文本框的ID和数据</param>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.SetCells(System.Int32,System.Int32,System.String)">
            <summary>
            向单元格写入数据，对当前WorkSheet操作
            </summary>
            <param name="rowIndex">行索引</param>
            <param name="columnIndex">列索引</param>
            <param name="text">要写入的文本值</param>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.SetCells(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            向单元格写入数据，对指定WorkSheet操作
            </summary>
            <param name="sheetIndex">工作表索引</param>
            <param name="rowIndex">行索引</param>
            <param name="columnIndex">列索引</param>
            <param name="text">要写入的文本值</param>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.SetCells(System.Collections.Hashtable)">
            <summary>
            向单元格写入数据，对每个WorkSheet操作
            </summary>
            <param name="ht">Hashtable的键值对保存单元格的位置索引（行索引和列索引用“,”隔开）和数据</param>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.SetCells(System.Int32,System.Collections.Hashtable)">
            <summary>
            向单元格写入数据，对指定WorkSheet操作
            </summary>
            <param name="ht">Hashtable的键值对保存单元格的位置索引（行索引和列索引用“,”隔开）和数据</param>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.SetCells(System.Int32,System.String[])">
            <summary>
            设置单元格为可计算的
            </summary>
            <remarks>
            如果Excel的单元格格式设置为数字，日期或者其他类型时，需要设置这些单元格的FormulaR1C1属性，
            否则写到这些单元格的数据将不会按照预先设定的格式显示
            </remarks>
            <param name="arr">保存单元格的位置索引（行索引和列索引用“,”隔开）和数据</param>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.SetCells(System.String,System.Collections.Hashtable)">
            <summary>
            向单元格写入数据，对指定WorkSheet操作
            </summary>
            <param name="ht">Hashtable的键值对保存单元格的位置索引（行索引和列索引用“,”隔开）和数据</param>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.MergeCells(System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            合并单元格，并赋值，对每个WorkSheet操作
            </summary>
            <param name="beginRowIndex">开始行索引</param>
            <param name="beginColumnIndex">开始列索引</param>
            <param name="endRowIndex">结束行索引</param>
            <param name="endColumnIndex">结束列索引</param>
            <param name="text">合并后Range的值</param>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.MergeCells(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            合并单元格，并赋值，对指定WorkSheet操作
            </summary>
            <param name="sheetIndex">WorkSheet索引</param>
            <param name="beginRowIndex">开始行索引</param>
            <param name="beginColumnIndex">开始列索引</param>
            <param name="endRowIndex">结束行索引</param>
            <param name="endColumnIndex">结束列索引</param>
            <param name="text">合并后Range的值</param>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.MergeRows(System.Int32,System.Int32,System.Int32)">
            <summary>
            将指定索引列的数据相同的行合并，对每个WorkSheet操作
            </summary>
            <param name="columnIndex">列索引</param>
            <param name="beginRowIndex">开始行索引</param>
            <param name="endRowIndex">结束行索引</param>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.MergeRows(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            将指定索引列的数据相同的行合并，对指定WorkSheet操作
            </summary>
            <param name="sheetIndex">WorkSheet索引</param>
            <param name="columnIndex">列索引</param>
            <param name="beginRowIndex">开始行索引</param>
            <param name="endRowIndex">结束行索引</param>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.InsertRows(System.Int32,System.Int32)">
            <summary>
            插行（在指定行上面插入指定数量行）
            </summary>
            <param name="rowIndex"></param>
            <param name="count"></param>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.InsertRows(System.Int32,System.Int32,System.Int32)">
            <summary>
            插行（在指定WorkSheet指定行上面插入指定数量行）
            </summary>
            <param name="sheetIndex"></param>
            <param name="rowIndex"></param>
            <param name="count"></param>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.CopyRows(System.Int32,System.Int32)">
            <summary>
            复制行（在指定行下面复制指定数量行）
            </summary>
            <param name="rowIndex"></param>
            <param name="count"></param>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.CopyRows(System.Int32,System.Int32,System.Int32)">
            <summary>
            复制行（在指定WorkSheet指定行下面复制指定数量行）
            </summary>
            <param name="sheetIndex"></param>
            <param name="rowIndex"></param>
            <param name="count"></param>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.DeleteRows(System.Int32,System.Int32)">
            <summary>
            删除行
            </summary>
            <param name="rowIndex"></param>
            <param name="count"></param>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.DeleteRows(System.Int32,System.Int32,System.Int32)">
            <summary>
            删除行
            </summary>
            <param name="sheetIndex"></param>
            <param name="rowIndex"></param>
            <param name="count"></param>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.InsertColumns(System.Int32,System.Int32)">
            <summary>
            插列（在指定列右边插入指定数量列）
            </summary>
            <param name="columnIndex"></param>
            <param name="count"></param>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.InsertColumns(System.Int32,System.Int32,System.Int32)">
            <summary>
            插列（在指定WorkSheet指定列右边插入指定数量列）
            </summary>
            <param name="sheetIndex"></param>
            <param name="columnIndex"></param>
            <param name="count"></param>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.CopyColumns(System.Int32,System.Int32)">
            <summary>
            复制列（在指定列右边复制指定数量列）
            </summary>
            <param name="columnIndex"></param>
            <param name="count"></param>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.CopyColumns(System.Int32,System.Int32,System.Int32)">
            <summary>
            复制列（在指定WorkSheet指定列右边复制指定数量列）
            </summary>
            <param name="sheetIndex"></param>
            <param name="columnIndex"></param>
            <param name="count"></param>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.DeleteColumns(System.Int32,System.Int32)">
            <summary>
            删除列
            </summary>
            <param name="columnIndex"></param>
            <param name="count"></param>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.DeleteColumns(System.Int32,System.Int32,System.Int32)">
            <summary>
            删除列
            </summary>
            <param name="sheetIndex"></param>
            <param name="columnIndex"></param>
            <param name="count"></param>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.RangeCopy(System.Int32,System.String,System.String,System.String)">
            <summary>
            将指定范围区域拷贝到目标区域
            </summary>
            <param name="sheetIndex">WorkSheet索引</param>
            <param name="startCell">要拷贝区域的开始Cell位置（比如：A10）</param>
            <param name="endCell">要拷贝区域的结束Cell位置（比如：F20）</param>
            <param name="targetCell">目标区域的开始Cell位置（比如：H10）</param>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.RangeCopy(System.String,System.String,System.String,System.String)">
            <summary>
            将指定范围区域拷贝到目标区域
            </summary>
            <param name="sheetName">WorkSheet名称</param>
            <param name="startCell">要拷贝区域的开始Cell位置（比如：A10）</param>
            <param name="endCell">要拷贝区域的结束Cell位置（比如：F20）</param>
            <param name="targetCell">目标区域的开始Cell位置（比如：H10）</param>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.RangAutoFill">
            <summary>
            自动填充
            </summary>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.ApplyStyle">
            <summary>
            应用样式
            </summary>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.LetterToInt(System.String)">
            <summary>
            将Excel列的字母索引值转换成整数索引值
            </summary>
            <param name="letter"></param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.IntToLetter(System.Int32)">
            <summary>
            将Excel列的整数索引值转换为字符索引值
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.OutputExcelFile">
            <summary>
            输出Excel文件并退出
            </summary>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.OutputFile(System.String)">
            <summary>
            输出指定格式的文件（支持格式：HTML，CSV，TEXT，EXCEL）
            </summary>
            <param name="format">HTML，CSV，TEXT，EXCEL，XML</param>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.SaveFile">
            <summary>
            保存文件
            </summary>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.SaveAsFile">
            <summary>
            另存文件
            </summary>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.SaveAsFile(System.String)">
            <summary>
            将Excel文件另存为指定格式
            </summary>
            <param name="format">HTML，CSV，TEXT，EXCEL，XML</param>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.SaveFile(System.String)">
            <summary>
            另存文件
            </summary>
            <param name="fileName">文件名</param>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.SaveAsFile(System.String,System.String)">
            <summary>
            将Excel文件另存为指定格式
            </summary>
            <param name="fileName">文件名</param>
            <param name="format">HTML，CSV，TEXT，EXCEL，XML</param>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.MergeCells(Excel.Worksheet,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            合并单元格，并赋值，对指定WorkSheet操作
            </summary>
            <param name="beginRowIndex">开始行索引</param>
            <param name="beginColumnIndex">开始列索引</param>
            <param name="endRowIndex">结束行索引</param>
            <param name="endColumnIndex">结束列索引</param>
            <param name="text">合并后Range的值</param>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.MergeRows(Excel.Worksheet,System.Int32,System.Int32,System.Int32)">
            <summary>
            将指定索引列的数据相同的行合并，对指定WorkSheet操作
            </summary>
            <param name="columnIndex">要合并的列索引</param>
            <param name="beginRowIndex">合并开始行索引</param>
            <param name="rows">要合并的行数</param>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.GetSheetCount(System.Int32,System.Int32)">
            <summary>
            计算WorkSheet数量
            </summary>
            <param name="rowCount">记录总行数</param>
            <param name="rows">每WorkSheet行数</param>
        </member>
        <member name="M:XCLNetTools.DataHandler.ExcelHelper.KillExcelProcess">
            <summary>
            结束Excel进程
            </summary>
        </member>
        <member name="P:XCLNetTools.DataHandler.ExcelHelper.SheetPrefixName">
            <summary>
            WorkSheet前缀名，比如：前缀名为“页”，那么WorkSheet名称依次为“页-1，页-2...”
            </summary>
        </member>
        <member name="P:XCLNetTools.DataHandler.ExcelHelper.WorkSheetCount">
            <summary>
            WorkSheet数量
            </summary>
        </member>
        <member name="P:XCLNetTools.DataHandler.ExcelHelper.TempletFilePath">
            <summary>
            Excel模板文件路径
            </summary>
        </member>
        <member name="P:XCLNetTools.DataHandler.ExcelHelper.OutputFilePath">
            <summary>
            输出Excel文件路径
            </summary>
        </member>
        <member name="T:XCLNetTools.Control.Pagination.AspNetPager.AspNetPagerClass">
            <summary>
            AspNetPager分页
            </summary>
        </member>
        <member name="M:XCLNetTools.Control.Pagination.AspNetPager.AspNetPagerClass.#ctor(Wuqi.Webdiyer.AspNetPager)">
            <summary>
            构造函数
            </summary>
            <param name="pager">当前分页控件</param>
        </member>
        <member name="M:XCLNetTools.Control.Pagination.AspNetPager.AspNetPagerClass.InitPager">
            <summary>
            分页控件初始化
            </summary>
        </member>
        <member name="P:XCLNetTools.Control.Pagination.AspNetPager.AspNetPagerClass.Pager">
            <summary>
            当前分页控件
            </summary>
        </member>
        <member name="T:XCLNetTools.Control.MxGraph.MxGraphHelper">
            <summary>
            MxGraph操作类
            </summary>
        </member>
        <member name="M:XCLNetTools.Control.MxGraph.MxGraphHelper.GetImage(System.String)">
            <summary>
            根据view形式的xml生成图片
            </summary>
            <param name="xml">view形式的xml</param>
            <returns>image对象</returns>
        </member>
        <member name="M:XCLNetTools.Control.MxGraph.MxGraphHelper.ExportImage(System.String,System.String)">
            <summary>
            导出mxGraph为图片
            </summary>
            <param name="xml">mxGraph的model的view形式的xml</param>
            <param name="filename">导出后的文件名（包含扩展名）</param>
        </member>
        <member name="T:XCLNetTools.StringHander.RandomHelper">
            <summary>
            随机数操作类
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.RandomHelper.GetRandomValue(System.Int32,System.Int32)">
            <summary>
            生成指定范围内的随机数（不重复）
            </summary>
            <param name="minValue">最小值（包含）</param>
            <param name="maxValue">最大值（不包含）</param>
        </member>
        <member name="M:XCLNetTools.StringHander.RandomHelper.GenerateIdWithGuid">
            <summary>
            将GUID的哈希数作为Random的种子，然后生成一个非负随机数
            例如：1024588704
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.RandomHelper.GenerateId">
            <summary>
            根据GUID生成Int（有符号）
            例如：2069396417
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.RandomHelper.GenerateStringId">
            <summary>
            根据guid生成字符串(16位)
            例如：aded0a2611f8aa4a
            </summary>
        </member>
        <member name="T:XCLNetTools.StringHander.PageValid">
            <summary>
            页面数据校验类
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.PageValid.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.PageValid.IsPhone(System.String)">
            <summary>
            是否为手机号
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.PageValid.IsNumber(System.String)">
            <summary>
            是否为纯数字（不带正负号）
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.PageValid.IsNumberSign(System.String)">
            <summary>
            是否数字（可带正负号）
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.PageValid.IsDecimal(System.String)">
            <summary>
            是否是浮点数（不带正负）
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.PageValid.IsDecimalSign(System.String)">
            <summary>
            是否是浮点数（可带正负号）
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.PageValid.IsHasCHZN(System.String)">
            <summary>
            检测是否有中文字符
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.PageValid.IsEmail(System.String)">
            <summary>
            是否是浮点数 可带正负号
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.PageValid.IsDateTime(System.String)">
            <summary>
            日期格式字符串判断
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.PageValid.IsURL(System.String)">
            <summary>
            是否为URL地址
            </summary>
        </member>
        <member name="T:XCLNetTools.PublicClass.SubTime">
            <summary>
            时间差的类
            </summary>
        </member>
        <member name="P:XCLNetTools.PublicClass.SubTime.StartTime">
            <summary>
            开始时间
            </summary>
        </member>
        <member name="P:XCLNetTools.PublicClass.SubTime.EndTime">
            <summary>
            结束时间
            </summary>
        </member>
        <member name="P:XCLNetTools.PublicClass.SubTime.SumTime">
            <summary>
            时间差（小时）
            </summary>
        </member>
    </members>
</doc>
